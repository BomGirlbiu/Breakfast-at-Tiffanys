{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  name: 'FinancialPage',\n  data() {\n    return {\n      // 概览数据\n      monthlyIncome: 0,\n      monthlyExpense: 0,\n      monthlyProfit: 0,\n      incomeTrend: 0,\n      expenseTrend: 0,\n      profitTrend: 0,\n      // 日期范围\n      startDate: this.getDefaultStartDate(),\n      endDate: this.getDefaultEndDate(),\n      selectedType: 'all',\n      // 图表实例\n      trendChart: null,\n      incomePieChart: null,\n      expensePieChart: null,\n      // 交易数据\n      transactions: [],\n      // 支出管理相关数据\n      expenses: [],\n      expenseCategories: [],\n      selectedCategory: '',\n      currentExpense: {\n        id: null,\n        expenseDate: '',\n        category: '',\n        amount: 0,\n        note: '',\n        createdBy: 'admin'\n      },\n      showExpenseDialog: false,\n      showDeleteDialog: false,\n      expenseToDelete: null,\n      // 加载状态\n      loading: {\n        summary: false,\n        trends: false,\n        incomePie: false,\n        expensePie: false,\n        transactions: false,\n        expenses: false\n      },\n      // API基础URL\n      apiBaseUrl: 'http://localhost:5050/api',\n      // 功能区域选择\n      activeTab: 'analysis'\n    };\n  },\n  computed: {\n    filteredTransactions() {\n      return this.transactions.filter(item => {\n        // 将字符串日期转换为Date对象进行比较\n        const itemDate = new Date(item.date.split('T')[0]);\n        const startDateObj = new Date(this.startDate);\n        const endDateObj = new Date(this.endDate);\n\n        // 添加调试日志\n        console.log('过滤交易记录:', item.id, itemDate, startDateObj <= itemDate, itemDate <= endDateObj);\n        const dateInRange = startDateObj <= itemDate && itemDate <= endDateObj;\n        const typeMatch = this.selectedType === 'all' || item.type === this.selectedType;\n        return dateInRange && typeMatch;\n      });\n    },\n    filteredExpenses() {\n      return this.expenses.filter(expense => {\n        // 日期过滤\n        const expenseDate = new Date(expense.expenseDate.split('T')[0]);\n        const startDateObj = new Date(this.startDate);\n        const endDateObj = new Date(this.endDate);\n        const dateInRange = startDateObj <= expenseDate && expenseDate <= endDateObj;\n\n        // 类别过滤\n        const categoryMatch = !this.selectedCategory || expense.category === this.selectedCategory;\n        return dateInRange && categoryMatch;\n      });\n    }\n  },\n  watch: {\n    startDate() {\n      this.fetchTransactions();\n      this.fetchExpenseComposition();\n      this.fetchIncomeComposition();\n    },\n    endDate() {\n      this.fetchTransactions();\n      this.fetchExpenseComposition();\n      this.fetchIncomeComposition();\n    },\n    selectedCategory() {\n      // 当选择的类别变化时更新过滤结果\n      console.log('支出类别筛选变更为:', this.selectedCategory);\n      this.fetchExpenses();\n    }\n  },\n  mounted() {\n    this.initCharts();\n    this.fetchData();\n    this.fetchExpenseCategories();\n  },\n  methods: {\n    // 获取默认开始日期（当年1月1日）\n    getDefaultStartDate() {\n      return '2024-01-01';\n    },\n    // 获取默认结束日期（2024年12月31日）\n    getDefaultEndDate() {\n      return '2024-12-31';\n    },\n    // 格式化日期时间\n    formatDateTime(date) {\n      return date + 'T00:00:00';\n    },\n    // 获取所有数据\n    fetchData() {\n      console.log('开始获取财务数据...');\n      this.fetchMonthlySummary();\n      this.fetchTrends();\n      this.fetchIncomeComposition();\n      this.fetchExpenseComposition();\n      this.fetchTransactions();\n      this.fetchExpenses();\n    },\n    // 获取月度概览数据\n    async fetchMonthlySummary() {\n      this.loading.summary = true;\n      try {\n        console.log('正在获取月度概览数据...');\n        const response = await axios.get(`${this.apiBaseUrl}/finance/monthly-summary`);\n        const data = response.data;\n        console.log('月度概览数据:', data);\n        this.monthlyIncome = data.monthlyIncome;\n        this.monthlyExpense = data.monthlyExpense;\n        this.monthlyProfit = data.monthlyProfit;\n        this.incomeTrend = data.incomeTrend;\n        this.expenseTrend = data.expenseTrend;\n        this.profitTrend = data.profitTrend;\n      } catch (error) {\n        console.error('获取月度概览数据失败:', error);\n        // 显示错误信息，方便调试\n        alert('获取月度概览数据失败，请检查后端服务是否正常运行');\n      } finally {\n        this.loading.summary = false;\n      }\n    },\n    // 获取趋势数据\n    async fetchTrends() {\n      this.loading.trends = true;\n      try {\n        console.log('正在获取趋势数据...');\n        const response = await axios.get(`${this.apiBaseUrl}/finance/trends`);\n        const data = response.data;\n        console.log('趋势数据:', data);\n\n        // 更新趋势图\n        this.updateTrendChart(data.labels, data.income, data.expense, data.profit);\n      } catch (error) {\n        console.error('获取趋势数据失败:', error);\n      } finally {\n        this.loading.trends = false;\n      }\n    },\n    // 获取收入构成数据\n    async fetchIncomeComposition() {\n      this.loading.incomePie = true;\n      try {\n        console.log('正在获取收入构成数据...');\n        const startDateTime = this.formatDateTime(this.startDate);\n        const endDateTime = this.formatDateTime(this.endDate);\n\n        // 从/api/finance/transactions接口获取原始交易数据\n        const response = await axios.get(`${this.apiBaseUrl}/finance/transactions`, {\n          params: {\n            startDate: startDateTime,\n            endDate: endDateTime\n          }\n        });\n        const transactionsData = response.data;\n        console.log('原始交易数据:', transactionsData);\n\n        // 筛选出收入类型的交易记录\n        const incomeTransactions = transactionsData.filter(transaction => transaction.type === 'income');\n\n        // 按类别分组统计收入金额\n        const incomeByCategory = {};\n        let totalIncome = 0;\n        for (const transaction of incomeTransactions) {\n          const category = transaction.category;\n          if (!incomeByCategory[category]) {\n            incomeByCategory[category] = 0;\n          }\n          incomeByCategory[category] += transaction.amount;\n          totalIncome += transaction.amount;\n        }\n\n        // 转换为饼图所需格式，并计算百分比\n        const chartData = [];\n        for (const [category, amount] of Object.entries(incomeByCategory)) {\n          const percentage = amount / totalIncome * 100 || 0;\n          chartData.push({\n            name: category,\n            value: amount.toFixed(2),\n            percentage: percentage.toFixed(1)\n          });\n        }\n\n        // 按金额降序排序\n        chartData.sort((a, b) => b.value - a.value);\n\n        // 如果没有收入数据，添加一条空数据\n        if (chartData.length === 0) {\n          chartData.push({\n            name: '暂无收入',\n            value: 0,\n            percentage: 0\n          });\n        }\n        console.log('处理后的收入构成数据:', chartData);\n\n        // 更新收入饼图\n        this.updateIncomePieChart(chartData);\n      } catch (error) {\n        console.error('获取收入构成数据失败:', error);\n        if (error.response) {\n          console.error('错误状态码:', error.response.status);\n          console.error('错误响应:', error.response.data);\n        }\n      } finally {\n        this.loading.incomePie = false;\n      }\n    },\n    // 获取支出构成数据\n    async fetchExpenseComposition() {\n      this.loading.expensePie = true;\n      try {\n        console.log('正在获取支出构成数据...');\n        const startDateTime = this.formatDateTime(this.startDate);\n        const endDateTime = this.formatDateTime(this.endDate);\n\n        // 从/api/expenses接口获取原始支出数据\n        const response = await axios.get(`${this.apiBaseUrl}/expenses`, {\n          params: {\n            startDate: startDateTime,\n            endDate: endDateTime\n          }\n        });\n        const expensesData = response.data;\n        console.log('原始支出数据:', expensesData);\n\n        // 按类别分组统计支出金额\n        const expenseByCategory = {};\n        let totalExpense = 0;\n        for (const expense of expensesData) {\n          const category = expense.category;\n          if (!expenseByCategory[category]) {\n            expenseByCategory[category] = 0;\n          }\n          expenseByCategory[category] += expense.amount;\n          totalExpense += expense.amount;\n        }\n\n        // 转换为饼图所需格式，并计算百分比\n        const chartData = [];\n        for (const [category, amount] of Object.entries(expenseByCategory)) {\n          const percentage = amount / totalExpense * 100 || 0;\n          chartData.push({\n            name: category,\n            value: amount.toFixed(2),\n            percentage: percentage.toFixed(1)\n          });\n        }\n\n        // 按金额降序排序\n        chartData.sort((a, b) => b.value - a.value);\n\n        // 如果没有支出数据，添加一条空数据\n        if (chartData.length === 0) {\n          chartData.push({\n            name: '暂无支出',\n            value: 0,\n            percentage: 0\n          });\n        }\n        console.log('处理后的支出构成数据:', chartData);\n\n        // 更新支出饼图\n        this.updateExpensePieChart(chartData);\n      } catch (error) {\n        console.error('获取支出构成数据失败:', error);\n        if (error.response) {\n          console.error('错误状态码:', error.response.status);\n          console.error('错误响应:', error.response.data);\n        }\n      } finally {\n        this.loading.expensePie = false;\n      }\n    },\n    // 获取交易明细数据\n    async fetchTransactions() {\n      this.loading.transactions = true;\n      try {\n        console.log('正在获取交易明细数据...');\n        console.log('日期范围:', this.startDate, '至', this.endDate);\n        const startDateTime = this.formatDateTime(this.startDate);\n        const endDateTime = this.formatDateTime(this.endDate);\n\n        // 获取支出数据\n        console.log('正在请求支出数据...');\n        const expenseResponse = await axios.get(`${this.apiBaseUrl}/expenses`, {\n          params: {\n            startDate: startDateTime,\n            endDate: endDateTime\n          }\n        });\n        console.log('支出数据响应:', expenseResponse.data);\n\n        // 获取收入数据\n        console.log('正在请求收入数据...');\n        const incomeResponse = await axios.get(`${this.apiBaseUrl}/finance/transactions`, {\n          params: {\n            startDate: startDateTime,\n            endDate: endDateTime\n          }\n        });\n        console.log('收入数据响应:', incomeResponse.data);\n\n        // 处理支出数据\n        const expenses = expenseResponse.data.map(expense => ({\n          id: expense.id,\n          date: expense.expenseDate,\n          type: 'expense',\n          category: expense.category,\n          amount: expense.amount,\n          note: expense.note\n        }));\n\n        // 处理收入数据\n        const incomes = incomeResponse.data.map(income => ({\n          id: income.id,\n          date: income.date,\n          type: 'income',\n          category: income.category,\n          amount: income.amount,\n          note: income.note\n        }));\n\n        // 合并并排序\n        this.transactions = [...expenses, ...incomes].sort((a, b) => {\n          return new Date(b.date) - new Date(a.date);\n        });\n        console.log('合并后的交易数据:', this.transactions);\n      } catch (error) {\n        console.error('获取交易明细数据失败:', error);\n        if (error.response) {\n          console.error('错误状态码:', error.response.status);\n          console.error('错误响应:', error.response.data);\n        }\n        this.transactions = [];\n      } finally {\n        this.loading.transactions = false;\n      }\n    },\n    // 获取支出数据\n    async fetchExpenses() {\n      this.loading.expenses = true;\n      try {\n        console.log('正在获取支出数据...');\n        const startDateTime = this.formatDateTime(this.startDate);\n        const endDateTime = this.formatDateTime(this.endDate);\n        const response = await axios.get(`${this.apiBaseUrl}/expenses`, {\n          params: {\n            startDate: startDateTime,\n            endDate: endDateTime,\n            category: this.selectedCategory || undefined\n          }\n        });\n        this.expenses = response.data;\n        console.log('支出数据:', this.expenses);\n      } catch (error) {\n        console.error('获取支出数据失败:', error);\n        if (error.response) {\n          console.error('错误状态码:', error.response.status);\n          console.error('错误响应:', error.response.data);\n        }\n        this.expenses = [];\n      } finally {\n        this.loading.expenses = false;\n      }\n    },\n    // 获取支出类别\n    async fetchExpenseCategories() {\n      try {\n        console.log('正在获取支出类别...');\n        const response = await axios.get(`${this.apiBaseUrl}/expenses/categories`);\n        this.expenseCategories = response.data;\n        console.log('支出类别:', this.expenseCategories);\n      } catch (error) {\n        console.error('获取支出类别失败:', error);\n        // 设置默认类别\n        this.expenseCategories = ['原料采购', '人工成本', '水电费用', '设备维护', '店铺租金', '其他支出'];\n      }\n    },\n    // 初始化图表\n    initCharts() {\n      // 初始化趋势图\n      this.trendChart = echarts.init(this.$refs.trendChart);\n\n      // 初始化收入构成饼图\n      this.incomePieChart = echarts.init(this.$refs.incomePieChart);\n\n      // 初始化支出构成饼图\n      this.expensePieChart = echarts.init(this.$refs.expensePieChart);\n\n      // 监听窗口大小变化，调整图表大小\n      window.addEventListener('resize', this.handleResize);\n    },\n    // 更新趋势图\n    updateTrendChart(labels, incomeData, expenseData, profitData) {\n      this.trendChart.setOption({\n        title: {\n          text: '近6个月收支趋势'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['收入', '支出', '利润']\n        },\n        xAxis: {\n          type: 'category',\n          data: labels\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          name: '收入',\n          type: 'line',\n          data: incomeData\n        }, {\n          name: '支出',\n          type: 'line',\n          data: expenseData\n        }, {\n          name: '利润',\n          type: 'line',\n          data: profitData\n        }]\n      });\n    },\n    // 更新收入构成饼图\n    updateIncomePieChart(data) {\n      const chartData = data.map(item => ({\n        name: item.name,\n        value: parseFloat(item.value)\n      }));\n      this.incomePieChart.setOption({\n        title: {\n          text: '收入构成'\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{a} <br/>{b}: {c} ({d}%)'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left',\n          type: 'scroll'\n        },\n        series: [{\n          name: '收入来源',\n          type: 'pie',\n          radius: '50%',\n          data: chartData,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          },\n          label: {\n            show: true,\n            formatter: '{b}: {d}%'\n          }\n        }]\n      });\n    },\n    // 更新支出构成饼图\n    updateExpensePieChart(data) {\n      const chartData = data.map(item => ({\n        name: item.name,\n        value: parseFloat(item.value)\n      }));\n      this.expensePieChart.setOption({\n        title: {\n          text: '支出构成'\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{a} <br/>{b}: {c} ({d}%)'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left',\n          type: 'scroll'\n        },\n        series: [{\n          name: '支出类别',\n          type: 'pie',\n          radius: '50%',\n          data: chartData,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          },\n          label: {\n            show: true,\n            formatter: '{b}: {d}%'\n          }\n        }]\n      });\n    },\n    handleResize() {\n      this.trendChart?.resize();\n      this.incomePieChart?.resize();\n      this.expensePieChart?.resize();\n    },\n    formatNumber(num) {\n      return num.toLocaleString('zh-CN', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    },\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('zh-CN');\n    },\n    // 打开支出编辑对话框\n    openExpenseDialog(expense) {\n      if (expense) {\n        // 编辑现有支出\n        this.currentExpense = {\n          id: expense.id,\n          expenseDate: expense.expenseDate.split('T')[0],\n          category: expense.category,\n          amount: expense.amount,\n          note: expense.note || '',\n          createdBy: expense.createdBy\n        };\n      } else {\n        // 添加新支出\n        const today = new Date().toISOString().split('T')[0];\n        this.currentExpense = {\n          id: null,\n          expenseDate: today,\n          category: this.expenseCategories.length > 0 ? this.expenseCategories[0] : '',\n          amount: 0,\n          note: '',\n          createdBy: 'admin'\n        };\n      }\n      this.showExpenseDialog = true;\n    },\n    // 保存支出\n    async saveExpense() {\n      try {\n        console.log('保存支出:', this.currentExpense);\n        const expenseData = {\n          ...this.currentExpense,\n          expenseDate: this.formatDateTime(this.currentExpense.expenseDate),\n          amount: parseFloat(this.currentExpense.amount)\n        };\n        let response;\n        if (this.currentExpense.id) {\n          // 更新已有支出\n          response = await axios.put(`${this.apiBaseUrl}/expenses/${this.currentExpense.id}`, expenseData);\n          console.log('支出更新成功:', response.data);\n        } else {\n          // 创建新支出\n          response = await axios.post(`${this.apiBaseUrl}/expenses`, expenseData);\n          console.log('支出创建成功:', response.data);\n        }\n\n        // 关闭对话框并刷新数据\n        this.showExpenseDialog = false;\n        this.fetchExpenses();\n        this.fetchExpenseComposition();\n        this.fetchMonthlySummary();\n        this.fetchTrends();\n      } catch (error) {\n        console.error('保存支出失败:', error);\n        if (error.response) {\n          console.error('错误状态码:', error.response.status);\n          console.error('错误响应:', error.response.data);\n          alert(`保存支出失败: ${error.response.data.message || '未知错误'}`);\n        } else {\n          alert('保存支出失败，请检查网络连接');\n        }\n      }\n    },\n    // 确认删除支出\n    confirmDeleteExpense(expense) {\n      this.expenseToDelete = expense;\n      this.showDeleteDialog = true;\n    },\n    // 删除支出\n    async deleteExpense() {\n      try {\n        console.log('删除支出:', this.expenseToDelete);\n        const response = await axios.delete(`${this.apiBaseUrl}/expenses/${this.expenseToDelete.id}`);\n        console.log('支出删除成功:', response.data);\n\n        // 关闭对话框并刷新数据\n        this.showDeleteDialog = false;\n        this.expenseToDelete = null;\n        this.fetchExpenses();\n        this.fetchExpenseComposition();\n        this.fetchMonthlySummary();\n        this.fetchTrends();\n      } catch (error) {\n        console.error('删除支出失败:', error);\n        if (error.response) {\n          console.error('错误状态码:', error.response.status);\n          console.error('错误响应:', error.response.data);\n          alert(`删除支出失败: ${error.response.data.message || '未知错误'}`);\n        } else {\n          alert('删除支出失败，请检查网络连接');\n        }\n      }\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n    this.trendChart?.dispose();\n    this.incomePieChart?.dispose();\n    this.expensePieChart?.dispose();\n  }\n};","map":{"version":3,"names":["echarts","axios","name","data","monthlyIncome","monthlyExpense","monthlyProfit","incomeTrend","expenseTrend","profitTrend","startDate","getDefaultStartDate","endDate","getDefaultEndDate","selectedType","trendChart","incomePieChart","expensePieChart","transactions","expenses","expenseCategories","selectedCategory","currentExpense","id","expenseDate","category","amount","note","createdBy","showExpenseDialog","showDeleteDialog","expenseToDelete","loading","summary","trends","incomePie","expensePie","apiBaseUrl","activeTab","computed","filteredTransactions","filter","item","itemDate","Date","date","split","startDateObj","endDateObj","console","log","dateInRange","typeMatch","type","filteredExpenses","expense","categoryMatch","watch","fetchTransactions","fetchExpenseComposition","fetchIncomeComposition","fetchExpenses","mounted","initCharts","fetchData","fetchExpenseCategories","methods","formatDateTime","fetchMonthlySummary","fetchTrends","response","get","error","alert","updateTrendChart","labels","income","profit","startDateTime","endDateTime","params","transactionsData","incomeTransactions","transaction","incomeByCategory","totalIncome","chartData","Object","entries","percentage","push","value","toFixed","sort","a","b","length","updateIncomePieChart","status","expensesData","expenseByCategory","totalExpense","updateExpensePieChart","expenseResponse","incomeResponse","map","incomes","undefined","init","$refs","window","addEventListener","handleResize","incomeData","expenseData","profitData","setOption","title","text","tooltip","trigger","legend","xAxis","yAxis","series","parseFloat","formatter","orient","left","radius","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","label","show","resize","formatNumber","num","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatDate","dateStr","toLocaleDateString","openExpenseDialog","today","toISOString","saveExpense","put","post","message","confirmDeleteExpense","deleteExpense","delete","beforeDestroy","removeEventListener","dispose"],"sources":["src/components/FinancialPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"financial-page\">\r\n    <h1 class=\"page-title\">财务分析</h1>\r\n    \r\n    <!-- 功能区域选择 -->\r\n    <div class=\"function-tabs\">\r\n      <button \r\n        :class=\"['tab-button', { active: activeTab === 'analysis' }]\" \r\n        @click=\"activeTab = 'analysis'\">\r\n        财务分析\r\n      </button>\r\n      <button \r\n        :class=\"['tab-button', { active: activeTab === 'expense-manage' }]\" \r\n        @click=\"activeTab = 'expense-manage'\">\r\n        支出管理\r\n      </button>\r\n    </div>\r\n    \r\n    <!-- 财务分析部分 -->\r\n    <div v-if=\"activeTab === 'analysis'\">\r\n      <!-- 财务概览卡片 -->\r\n      <div class=\"financial-overview\">\r\n        <div class=\"overview-card income\">\r\n          <h3>本月收入</h3>\r\n          <div v-if=\"loading.summary\" class=\"loading-spinner\"></div>\r\n          <template v-else>\r\n            <div class=\"amount\">¥{{ formatNumber(monthlyIncome) }}</div>\r\n            <div class=\"trend\" :class=\"{ 'up': incomeTrend > 0, 'down': incomeTrend < 0 }\">\r\n              {{ incomeTrend > 0 ? '+' : '' }}{{ incomeTrend }}%\r\n            </div>\r\n          </template>\r\n        </div>\r\n        <div class=\"overview-card expense\">\r\n          <h3>本月支出</h3>\r\n          <div v-if=\"loading.summary\" class=\"loading-spinner\"></div>\r\n          <template v-else>\r\n            <div class=\"amount\">¥{{ formatNumber(monthlyExpense) }}</div>\r\n            <div class=\"trend\" :class=\"{ 'up': expenseTrend > 0, 'down': expenseTrend < 0 }\">\r\n              {{ expenseTrend > 0 ? '+' : '' }}{{ expenseTrend }}%\r\n            </div>\r\n          </template>\r\n        </div>\r\n        <div class=\"overview-card profit\">\r\n          <h3>本月利润</h3>\r\n          <div v-if=\"loading.summary\" class=\"loading-spinner\"></div>\r\n          <template v-else>\r\n            <div class=\"amount\">¥{{ formatNumber(monthlyProfit) }}</div>\r\n            <div class=\"trend\" :class=\"{ 'up': profitTrend > 0, 'down': profitTrend < 0 }\">\r\n              {{ profitTrend > 0 ? '+' : '' }}{{ profitTrend }}%\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 图表区域 -->\r\n      <div class=\"charts-container\">\r\n        <!-- 收入支出趋势图 -->\r\n        <div class=\"chart-card\">\r\n          <h3>收入支出趋势</h3>\r\n          <div v-if=\"loading.trends\" class=\"chart-loading\">加载中...</div>\r\n          <div ref=\"trendChart\" class=\"chart\"></div>\r\n        </div>\r\n        \r\n        <!-- 收入构成饼图 -->\r\n        <div class=\"chart-card\">\r\n          <h3>收入构成</h3>\r\n          <div v-if=\"loading.incomePie\" class=\"chart-loading\">加载中...</div>\r\n          <div ref=\"incomePieChart\" class=\"chart\"></div>\r\n        </div>\r\n        \r\n        <!-- 支出构成饼图 -->\r\n        <div class=\"chart-card\">\r\n          <h3>支出构成</h3>\r\n          <div v-if=\"loading.expensePie\" class=\"chart-loading\">加载中...</div>\r\n          <div ref=\"expensePieChart\" class=\"chart\"></div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 详细数据表格 -->\r\n      <div class=\"data-table-container\">\r\n        <h3>财务明细</h3>\r\n        <div class=\"table-controls\">\r\n          <div class=\"date-range\">\r\n            <input type=\"date\" v-model=\"startDate\" class=\"date-input\">\r\n            <span>至</span>\r\n            <input type=\"date\" v-model=\"endDate\" class=\"date-input\">\r\n          </div>\r\n          <div class=\"table-filters\">\r\n            <select v-model=\"selectedType\" class=\"filter-select\">\r\n              <option value=\"all\">全部类型</option>\r\n              <option value=\"income\">收入</option>\r\n              <option value=\"expense\">支出</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"loading.transactions\" class=\"table-loading\">\r\n          <div class=\"loading-spinner\"></div>\r\n          <div>加载交易数据中...</div>\r\n        </div>\r\n        \r\n        <table v-else class=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>日期</th>\r\n              <th>类型</th>\r\n              <th>分类</th>\r\n              <th>金额</th>\r\n              <th>备注</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"item in filteredTransactions\" :key=\"item.id\">\r\n              <td>{{ formatDate(item.date) }}</td>\r\n              <td>\r\n                <span :class=\"['type-badge', item.type]\">\r\n                  {{ item.type === 'income' ? '收入' : '支出' }}\r\n                </span>\r\n              </td>\r\n              <td>{{ item.category }}</td>\r\n              <td :class=\"item.type === 'income' ? 'income-amount' : 'expense-amount'\">\r\n                {{ item.type === 'income' ? '+' : '-' }}¥{{ formatNumber(item.amount) }}\r\n              </td>\r\n              <td>{{ item.note }}</td>\r\n            </tr>\r\n            <tr v-if=\"filteredTransactions.length === 0\">\r\n              <td colspan=\"5\" class=\"no-data\">没有符合条件的交易记录</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 支出管理部分 -->\r\n    <div v-if=\"activeTab === 'expense-manage'\" class=\"expense-manage\">\r\n      <div class=\"expense-header\">\r\n        <h3>支出管理</h3>\r\n        <button class=\"add-button\" @click=\"openExpenseDialog(null)\">添加支出</button>\r\n      </div>\r\n\r\n      <!-- 支出筛选器 -->\r\n      <div class=\"filter-section\">\r\n        <div class=\"date-range\">\r\n          <input type=\"date\" v-model=\"startDate\" class=\"date-input\">\r\n          <span>至</span>\r\n          <input type=\"date\" v-model=\"endDate\" class=\"date-input\">\r\n        </div>\r\n        <div class=\"category-filter\">\r\n          <select v-model=\"selectedCategory\" class=\"filter-select\">\r\n            <option value=\"\">全部类别</option>\r\n            <option v-for=\"category in expenseCategories\" :key=\"category\" :value=\"category\">\r\n              {{ category }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 支出列表 -->\r\n      <div v-if=\"loading.expenses\" class=\"loading-container\">\r\n        <div class=\"loading-spinner\"></div>\r\n        <div>加载支出数据中...</div>\r\n      </div>\r\n      <div v-else class=\"expense-list\">\r\n        <table class=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>日期</th>\r\n              <th>类别</th>\r\n              <th>金额</th>\r\n              <th>备注</th>\r\n              <th>创建人</th>\r\n              <th>操作</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"expense in filteredExpenses\" :key=\"expense.id\">\r\n              <td>{{ formatDate(expense.expenseDate) }}</td>\r\n              <td>\r\n                <span class=\"category-badge\">{{ expense.category }}</span>\r\n              </td>\r\n              <td class=\"expense-amount\">¥{{ formatNumber(expense.amount) }}</td>\r\n              <td>{{ expense.note || '无' }}</td>\r\n              <td>{{ expense.createdBy }}</td>\r\n              <td class=\"actions\">\r\n                <button class=\"action-button edit\" @click=\"openExpenseDialog(expense)\">编辑</button>\r\n                <button class=\"action-button delete\" @click=\"confirmDeleteExpense(expense)\">删除</button>\r\n              </td>\r\n            </tr>\r\n            <tr v-if=\"filteredExpenses.length === 0\">\r\n              <td colspan=\"6\" class=\"no-data\">没有符合条件的支出记录</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <!-- 支出编辑对话框 -->\r\n      <div v-if=\"showExpenseDialog\" class=\"dialog-overlay\" @click.self=\"showExpenseDialog = false\">\r\n        <div class=\"dialog-content\">\r\n          <h3>{{ currentExpense.id ? '编辑支出' : '添加支出' }}</h3>\r\n          <form @submit.prevent=\"saveExpense\">\r\n            <div class=\"form-group\">\r\n              <label for=\"expenseDate\">支出日期</label>\r\n              <input type=\"date\" id=\"expenseDate\" v-model=\"currentExpense.expenseDate\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"category\">支出类别</label>\r\n              <select id=\"category\" v-model=\"currentExpense.category\" required>\r\n                <option v-for=\"category in expenseCategories\" :key=\"category\" :value=\"category\">\r\n                  {{ category }}\r\n                </option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"amount\">金额</label>\r\n              <input type=\"number\" id=\"amount\" v-model=\"currentExpense.amount\" step=\"0.01\" min=\"0\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"note\">备注</label>\r\n              <textarea id=\"note\" v-model=\"currentExpense.note\" rows=\"3\"></textarea>\r\n            </div>\r\n            <div class=\"form-buttons\">\r\n              <button type=\"button\" class=\"cancel-button\" @click=\"showExpenseDialog = false\">取消</button>\r\n              <button type=\"submit\" class=\"save-button\">保存</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 删除确认对话框 -->\r\n      <div v-if=\"showDeleteDialog\" class=\"dialog-overlay\" @click.self=\"showDeleteDialog = false\">\r\n        <div class=\"dialog-content delete-dialog\">\r\n          <h3>确认删除</h3>\r\n          <p>您确定要删除这条支出记录吗？此操作不可撤销。</p>\r\n          <div class=\"form-buttons\">\r\n            <button class=\"cancel-button\" @click=\"showDeleteDialog = false\">取消</button>\r\n            <button class=\"delete-button\" @click=\"deleteExpense\">删除</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'FinancialPage',\r\n  data() {\r\n    return {\r\n      // 概览数据\r\n      monthlyIncome: 0,\r\n      monthlyExpense: 0,\r\n      monthlyProfit: 0,\r\n      incomeTrend: 0,\r\n      expenseTrend: 0,\r\n      profitTrend: 0,\r\n\r\n      // 日期范围\r\n      startDate: this.getDefaultStartDate(),\r\n      endDate: this.getDefaultEndDate(),\r\n      selectedType: 'all',\r\n\r\n      // 图表实例\r\n      trendChart: null,\r\n      incomePieChart: null,\r\n      expensePieChart: null,\r\n\r\n      // 交易数据\r\n      transactions: [],\r\n      \r\n      // 支出管理相关数据\r\n      expenses: [],\r\n      expenseCategories: [],\r\n      selectedCategory: '',\r\n      currentExpense: {\r\n        id: null,\r\n        expenseDate: '',\r\n        category: '',\r\n        amount: 0,\r\n        note: '',\r\n        createdBy: 'admin'\r\n      },\r\n      showExpenseDialog: false,\r\n      showDeleteDialog: false,\r\n      expenseToDelete: null,\r\n      \r\n      // 加载状态\r\n      loading: {\r\n        summary: false,\r\n        trends: false,\r\n        incomePie: false,\r\n        expensePie: false,\r\n        transactions: false,\r\n        expenses: false\r\n      },\r\n      \r\n      // API基础URL\r\n      apiBaseUrl: 'http://localhost:5050/api',\r\n\r\n      // 功能区域选择\r\n      activeTab: 'analysis'\r\n    }\r\n  },\r\n  computed: {\r\n    filteredTransactions() {\r\n      return this.transactions.filter(item => {\r\n        // 将字符串日期转换为Date对象进行比较\r\n        const itemDate = new Date(item.date.split('T')[0])\r\n        const startDateObj = new Date(this.startDate)\r\n        const endDateObj = new Date(this.endDate)\r\n        \r\n        // 添加调试日志\r\n        console.log('过滤交易记录:', item.id, itemDate, startDateObj <= itemDate, itemDate <= endDateObj)\r\n        \r\n        const dateInRange = startDateObj <= itemDate && itemDate <= endDateObj\r\n        const typeMatch = this.selectedType === 'all' || item.type === this.selectedType\r\n        return dateInRange && typeMatch\r\n      })\r\n    },\r\n    filteredExpenses() {\r\n      return this.expenses.filter(expense => {\r\n        // 日期过滤\r\n        const expenseDate = new Date(expense.expenseDate.split('T')[0])\r\n        const startDateObj = new Date(this.startDate)\r\n        const endDateObj = new Date(this.endDate)\r\n        const dateInRange = startDateObj <= expenseDate && expenseDate <= endDateObj\r\n        \r\n        // 类别过滤\r\n        const categoryMatch = !this.selectedCategory || expense.category === this.selectedCategory\r\n        \r\n        return dateInRange && categoryMatch\r\n      })\r\n    }\r\n  },\r\n  watch: {\r\n    startDate() {\r\n      this.fetchTransactions()\r\n      this.fetchExpenseComposition()\r\n      this.fetchIncomeComposition()\r\n    },\r\n    endDate() {\r\n      this.fetchTransactions()\r\n      this.fetchExpenseComposition()\r\n      this.fetchIncomeComposition()\r\n    },\r\n    selectedCategory() {\r\n      // 当选择的类别变化时更新过滤结果\r\n      console.log('支出类别筛选变更为:', this.selectedCategory)\r\n      this.fetchExpenses()\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initCharts()\r\n    this.fetchData()\r\n    this.fetchExpenseCategories()\r\n  },\r\n  methods: {\r\n    // 获取默认开始日期（当年1月1日）\r\n    getDefaultStartDate() {\r\n      return '2024-01-01'\r\n    },\r\n    \r\n    // 获取默认结束日期（2024年12月31日）\r\n    getDefaultEndDate() {\r\n      return '2024-12-31'\r\n    },\r\n    \r\n    // 格式化日期时间\r\n    formatDateTime(date) {\r\n      return date + 'T00:00:00'\r\n    },\r\n    \r\n    // 获取所有数据\r\n    fetchData() {\r\n      console.log('开始获取财务数据...')\r\n      this.fetchMonthlySummary()\r\n      this.fetchTrends()\r\n      this.fetchIncomeComposition()\r\n      this.fetchExpenseComposition()\r\n      this.fetchTransactions()\r\n      this.fetchExpenses()\r\n    },\r\n    \r\n    // 获取月度概览数据\r\n    async fetchMonthlySummary() {\r\n      this.loading.summary = true\r\n      try {\r\n        console.log('正在获取月度概览数据...')\r\n        const response = await axios.get(`${this.apiBaseUrl}/finance/monthly-summary`)\r\n        const data = response.data\r\n        console.log('月度概览数据:', data)\r\n        \r\n        this.monthlyIncome = data.monthlyIncome\r\n        this.monthlyExpense = data.monthlyExpense\r\n        this.monthlyProfit = data.monthlyProfit\r\n        this.incomeTrend = data.incomeTrend\r\n        this.expenseTrend = data.expenseTrend\r\n        this.profitTrend = data.profitTrend\r\n      } catch (error) {\r\n        console.error('获取月度概览数据失败:', error)\r\n        // 显示错误信息，方便调试\r\n        alert('获取月度概览数据失败，请检查后端服务是否正常运行')\r\n      } finally {\r\n        this.loading.summary = false\r\n      }\r\n    },\r\n    \r\n    // 获取趋势数据\r\n    async fetchTrends() {\r\n      this.loading.trends = true\r\n      try {\r\n        console.log('正在获取趋势数据...')\r\n        const response = await axios.get(`${this.apiBaseUrl}/finance/trends`)\r\n        const data = response.data\r\n        console.log('趋势数据:', data)\r\n        \r\n        // 更新趋势图\r\n        this.updateTrendChart(data.labels, data.income, data.expense, data.profit)\r\n      } catch (error) {\r\n        console.error('获取趋势数据失败:', error)\r\n      } finally {\r\n        this.loading.trends = false\r\n      }\r\n    },\r\n    \r\n    // 获取收入构成数据\r\n    async fetchIncomeComposition() {\r\n      this.loading.incomePie = true\r\n      try {\r\n        console.log('正在获取收入构成数据...')\r\n        \r\n        const startDateTime = this.formatDateTime(this.startDate)\r\n        const endDateTime = this.formatDateTime(this.endDate)\r\n        \r\n        // 从/api/finance/transactions接口获取原始交易数据\r\n        const response = await axios.get(`${this.apiBaseUrl}/finance/transactions`, {\r\n          params: {\r\n            startDate: startDateTime,\r\n            endDate: endDateTime\r\n          }\r\n        })\r\n        \r\n        const transactionsData = response.data\r\n        console.log('原始交易数据:', transactionsData)\r\n        \r\n        // 筛选出收入类型的交易记录\r\n        const incomeTransactions = transactionsData.filter(transaction => transaction.type === 'income')\r\n        \r\n        // 按类别分组统计收入金额\r\n        const incomeByCategory = {}\r\n        let totalIncome = 0\r\n        \r\n        for (const transaction of incomeTransactions) {\r\n          const category = transaction.category\r\n          if (!incomeByCategory[category]) {\r\n            incomeByCategory[category] = 0\r\n          }\r\n          incomeByCategory[category] += transaction.amount\r\n          totalIncome += transaction.amount\r\n        }\r\n        \r\n        // 转换为饼图所需格式，并计算百分比\r\n        const chartData = []\r\n        for (const [category, amount] of Object.entries(incomeByCategory)) {\r\n          const percentage = (amount / totalIncome * 100) || 0\r\n          chartData.push({\r\n            name: category,\r\n            value: amount.toFixed(2),\r\n            percentage: percentage.toFixed(1)\r\n          })\r\n        }\r\n        \r\n        // 按金额降序排序\r\n        chartData.sort((a, b) => b.value - a.value)\r\n        \r\n        // 如果没有收入数据，添加一条空数据\r\n        if (chartData.length === 0) {\r\n          chartData.push({ name: '暂无收入', value: 0, percentage: 0 })\r\n        }\r\n        \r\n        console.log('处理后的收入构成数据:', chartData)\r\n        \r\n        // 更新收入饼图\r\n        this.updateIncomePieChart(chartData)\r\n      } catch (error) {\r\n        console.error('获取收入构成数据失败:', error)\r\n        if (error.response) {\r\n          console.error('错误状态码:', error.response.status)\r\n          console.error('错误响应:', error.response.data)\r\n        }\r\n      } finally {\r\n        this.loading.incomePie = false\r\n      }\r\n    },\r\n    \r\n    // 获取支出构成数据\r\n    async fetchExpenseComposition() {\r\n      this.loading.expensePie = true\r\n      try {\r\n        console.log('正在获取支出构成数据...')\r\n        \r\n        const startDateTime = this.formatDateTime(this.startDate)\r\n        const endDateTime = this.formatDateTime(this.endDate)\r\n        \r\n        // 从/api/expenses接口获取原始支出数据\r\n        const response = await axios.get(`${this.apiBaseUrl}/expenses`, {\r\n          params: {\r\n            startDate: startDateTime,\r\n            endDate: endDateTime\r\n          }\r\n        })\r\n        \r\n        const expensesData = response.data\r\n        console.log('原始支出数据:', expensesData)\r\n        \r\n        // 按类别分组统计支出金额\r\n        const expenseByCategory = {}\r\n        let totalExpense = 0\r\n        \r\n        for (const expense of expensesData) {\r\n          const category = expense.category\r\n          if (!expenseByCategory[category]) {\r\n            expenseByCategory[category] = 0\r\n          }\r\n          expenseByCategory[category] += expense.amount\r\n          totalExpense += expense.amount\r\n        }\r\n        \r\n        // 转换为饼图所需格式，并计算百分比\r\n        const chartData = []\r\n        for (const [category, amount] of Object.entries(expenseByCategory)) {\r\n          const percentage = (amount / totalExpense * 100) || 0\r\n          chartData.push({\r\n            name: category,\r\n            value: amount.toFixed(2),\r\n            percentage: percentage.toFixed(1)\r\n          })\r\n        }\r\n        \r\n        // 按金额降序排序\r\n        chartData.sort((a, b) => b.value - a.value)\r\n        \r\n        // 如果没有支出数据，添加一条空数据\r\n        if (chartData.length === 0) {\r\n          chartData.push({ name: '暂无支出', value: 0, percentage: 0 })\r\n        }\r\n        \r\n        console.log('处理后的支出构成数据:', chartData)\r\n        \r\n        // 更新支出饼图\r\n        this.updateExpensePieChart(chartData)\r\n      } catch (error) {\r\n        console.error('获取支出构成数据失败:', error)\r\n        if (error.response) {\r\n          console.error('错误状态码:', error.response.status)\r\n          console.error('错误响应:', error.response.data)\r\n        }\r\n      } finally {\r\n        this.loading.expensePie = false\r\n      }\r\n    },\r\n    \r\n    // 获取交易明细数据\r\n    async fetchTransactions() {\r\n      this.loading.transactions = true\r\n      try {\r\n        console.log('正在获取交易明细数据...')\r\n        console.log('日期范围:', this.startDate, '至', this.endDate)\r\n        \r\n        const startDateTime = this.formatDateTime(this.startDate)\r\n        const endDateTime = this.formatDateTime(this.endDate)\r\n        \r\n        // 获取支出数据\r\n        console.log('正在请求支出数据...')\r\n        const expenseResponse = await axios.get(`${this.apiBaseUrl}/expenses`, {\r\n          params: {\r\n            startDate: startDateTime,\r\n            endDate: endDateTime\r\n          }\r\n        })\r\n        console.log('支出数据响应:', expenseResponse.data)\r\n        \r\n        // 获取收入数据\r\n        console.log('正在请求收入数据...')\r\n        const incomeResponse = await axios.get(`${this.apiBaseUrl}/finance/transactions`, {\r\n          params: {\r\n            startDate: startDateTime,\r\n            endDate: endDateTime\r\n          }\r\n        })\r\n        console.log('收入数据响应:', incomeResponse.data)\r\n        \r\n        // 处理支出数据\r\n        const expenses = expenseResponse.data.map(expense => ({\r\n          id: expense.id,\r\n          date: expense.expenseDate,\r\n          type: 'expense',\r\n          category: expense.category,\r\n          amount: expense.amount,\r\n          note: expense.note\r\n        }))\r\n        \r\n        // 处理收入数据\r\n        const incomes = incomeResponse.data.map(income => ({\r\n          id: income.id,\r\n          date: income.date,\r\n          type: 'income',\r\n          category: income.category,\r\n          amount: income.amount,\r\n          note: income.note\r\n        }))\r\n        \r\n        // 合并并排序\r\n        this.transactions = [...expenses, ...incomes].sort((a, b) => {\r\n          return new Date(b.date) - new Date(a.date)\r\n        })\r\n        \r\n        console.log('合并后的交易数据:', this.transactions)\r\n      } catch (error) {\r\n        console.error('获取交易明细数据失败:', error)\r\n        if (error.response) {\r\n          console.error('错误状态码:', error.response.status)\r\n          console.error('错误响应:', error.response.data)\r\n        }\r\n        this.transactions = []\r\n      } finally {\r\n        this.loading.transactions = false\r\n      }\r\n    },\r\n    \r\n    // 获取支出数据\r\n    async fetchExpenses() {\r\n      this.loading.expenses = true\r\n      try {\r\n        console.log('正在获取支出数据...')\r\n        \r\n        const startDateTime = this.formatDateTime(this.startDate)\r\n        const endDateTime = this.formatDateTime(this.endDate)\r\n        \r\n        const response = await axios.get(`${this.apiBaseUrl}/expenses`, {\r\n          params: {\r\n            startDate: startDateTime,\r\n            endDate: endDateTime,\r\n            category: this.selectedCategory || undefined\r\n          }\r\n        })\r\n        \r\n        this.expenses = response.data\r\n        console.log('支出数据:', this.expenses)\r\n      } catch (error) {\r\n        console.error('获取支出数据失败:', error)\r\n        if (error.response) {\r\n          console.error('错误状态码:', error.response.status)\r\n          console.error('错误响应:', error.response.data)\r\n        }\r\n        this.expenses = []\r\n      } finally {\r\n        this.loading.expenses = false\r\n      }\r\n    },\r\n    \r\n    // 获取支出类别\r\n    async fetchExpenseCategories() {\r\n      try {\r\n        console.log('正在获取支出类别...')\r\n        const response = await axios.get(`${this.apiBaseUrl}/expenses/categories`)\r\n        this.expenseCategories = response.data\r\n        console.log('支出类别:', this.expenseCategories)\r\n      } catch (error) {\r\n        console.error('获取支出类别失败:', error)\r\n        // 设置默认类别\r\n        this.expenseCategories = ['原料采购', '人工成本', '水电费用', '设备维护', '店铺租金', '其他支出']\r\n      }\r\n    },\r\n    \r\n    // 初始化图表\r\n    initCharts() {\r\n      // 初始化趋势图\r\n      this.trendChart = echarts.init(this.$refs.trendChart)\r\n      \r\n      // 初始化收入构成饼图\r\n      this.incomePieChart = echarts.init(this.$refs.incomePieChart)\r\n      \r\n      // 初始化支出构成饼图\r\n      this.expensePieChart = echarts.init(this.$refs.expensePieChart)\r\n      \r\n      // 监听窗口大小变化，调整图表大小\r\n      window.addEventListener('resize', this.handleResize)\r\n    },\r\n    \r\n    // 更新趋势图\r\n    updateTrendChart(labels, incomeData, expenseData, profitData) {\r\n      this.trendChart.setOption({\r\n        title: {\r\n          text: '近6个月收支趋势'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        legend: {\r\n          data: ['收入', '支出', '利润']\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: labels\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        series: [\r\n          {\r\n            name: '收入',\r\n            type: 'line',\r\n            data: incomeData\r\n          },\r\n          {\r\n            name: '支出',\r\n            type: 'line',\r\n            data: expenseData\r\n          },\r\n          {\r\n            name: '利润',\r\n            type: 'line',\r\n            data: profitData\r\n          }\r\n        ]\r\n      })\r\n    },\r\n    \r\n    // 更新收入构成饼图\r\n    updateIncomePieChart(data) {\r\n      const chartData = data.map(item => ({\r\n        name: item.name,\r\n        value: parseFloat(item.value)\r\n      }))\r\n      \r\n      this.incomePieChart.setOption({\r\n        title: {\r\n          text: '收入构成'\r\n        },\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{a} <br/>{b}: {c} ({d}%)'\r\n        },\r\n        legend: {\r\n          orient: 'vertical',\r\n          left: 'left',\r\n          type: 'scroll'\r\n        },\r\n        series: [\r\n          {\r\n            name: '收入来源',\r\n            type: 'pie',\r\n            radius: '50%',\r\n            data: chartData,\r\n            emphasis: {\r\n              itemStyle: {\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n            label: {\r\n              show: true,\r\n              formatter: '{b}: {d}%'\r\n            }\r\n          }\r\n        ]\r\n      })\r\n    },\r\n    \r\n    // 更新支出构成饼图\r\n    updateExpensePieChart(data) {\r\n      const chartData = data.map(item => ({\r\n        name: item.name,\r\n        value: parseFloat(item.value)\r\n      }))\r\n      \r\n      this.expensePieChart.setOption({\r\n        title: {\r\n          text: '支出构成'\r\n        },\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{a} <br/>{b}: {c} ({d}%)'\r\n        },\r\n        legend: {\r\n          orient: 'vertical',\r\n          left: 'left',\r\n          type: 'scroll'\r\n        },\r\n        series: [\r\n          {\r\n            name: '支出类别',\r\n            type: 'pie',\r\n            radius: '50%',\r\n            data: chartData,\r\n            emphasis: {\r\n              itemStyle: {\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n            label: {\r\n              show: true,\r\n              formatter: '{b}: {d}%'\r\n            }\r\n          }\r\n        ]\r\n      })\r\n    },\r\n    \r\n    handleResize() {\r\n      this.trendChart?.resize()\r\n      this.incomePieChart?.resize()\r\n      this.expensePieChart?.resize()\r\n    },\r\n    \r\n    formatNumber(num) {\r\n      return num.toLocaleString('zh-CN', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n      })\r\n    },\r\n    \r\n    formatDate(dateStr) {\r\n      const date = new Date(dateStr)\r\n      return date.toLocaleDateString('zh-CN')\r\n    },\r\n    \r\n    // 打开支出编辑对话框\r\n    openExpenseDialog(expense) {\r\n      if (expense) {\r\n        // 编辑现有支出\r\n        this.currentExpense = {\r\n          id: expense.id,\r\n          expenseDate: expense.expenseDate.split('T')[0],\r\n          category: expense.category,\r\n          amount: expense.amount,\r\n          note: expense.note || '',\r\n          createdBy: expense.createdBy\r\n        }\r\n      } else {\r\n        // 添加新支出\r\n        const today = new Date().toISOString().split('T')[0]\r\n        this.currentExpense = {\r\n          id: null,\r\n          expenseDate: today,\r\n          category: this.expenseCategories.length > 0 ? this.expenseCategories[0] : '',\r\n          amount: 0,\r\n          note: '',\r\n          createdBy: 'admin'\r\n        }\r\n      }\r\n      this.showExpenseDialog = true\r\n    },\r\n    \r\n    // 保存支出\r\n    async saveExpense() {\r\n      try {\r\n        console.log('保存支出:', this.currentExpense)\r\n        \r\n        const expenseData = {\r\n          ...this.currentExpense,\r\n          expenseDate: this.formatDateTime(this.currentExpense.expenseDate),\r\n          amount: parseFloat(this.currentExpense.amount)\r\n        }\r\n        \r\n        let response\r\n        \r\n        if (this.currentExpense.id) {\r\n          // 更新已有支出\r\n          response = await axios.put(`${this.apiBaseUrl}/expenses/${this.currentExpense.id}`, expenseData)\r\n          console.log('支出更新成功:', response.data)\r\n        } else {\r\n          // 创建新支出\r\n          response = await axios.post(`${this.apiBaseUrl}/expenses`, expenseData)\r\n          console.log('支出创建成功:', response.data)\r\n        }\r\n        \r\n        // 关闭对话框并刷新数据\r\n        this.showExpenseDialog = false\r\n        this.fetchExpenses()\r\n        this.fetchExpenseComposition()\r\n        this.fetchMonthlySummary()\r\n        this.fetchTrends()\r\n      } catch (error) {\r\n        console.error('保存支出失败:', error)\r\n        if (error.response) {\r\n          console.error('错误状态码:', error.response.status)\r\n          console.error('错误响应:', error.response.data)\r\n          alert(`保存支出失败: ${error.response.data.message || '未知错误'}`)\r\n        } else {\r\n          alert('保存支出失败，请检查网络连接')\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 确认删除支出\r\n    confirmDeleteExpense(expense) {\r\n      this.expenseToDelete = expense\r\n      this.showDeleteDialog = true\r\n    },\r\n    \r\n    // 删除支出\r\n    async deleteExpense() {\r\n      try {\r\n        console.log('删除支出:', this.expenseToDelete)\r\n        \r\n        const response = await axios.delete(`${this.apiBaseUrl}/expenses/${this.expenseToDelete.id}`)\r\n        console.log('支出删除成功:', response.data)\r\n        \r\n        // 关闭对话框并刷新数据\r\n        this.showDeleteDialog = false\r\n        this.expenseToDelete = null\r\n        this.fetchExpenses()\r\n        this.fetchExpenseComposition()\r\n        this.fetchMonthlySummary()\r\n        this.fetchTrends()\r\n      } catch (error) {\r\n        console.error('删除支出失败:', error)\r\n        if (error.response) {\r\n          console.error('错误状态码:', error.response.status)\r\n          console.error('错误响应:', error.response.data)\r\n          alert(`删除支出失败: ${error.response.data.message || '未知错误'}`)\r\n        } else {\r\n          alert('删除支出失败，请检查网络连接')\r\n        }\r\n      }\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.handleResize)\r\n    this.trendChart?.dispose()\r\n    this.incomePieChart?.dispose()\r\n    this.expensePieChart?.dispose()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.financial-page {\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.page-title {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n\r\n/* 财务概览卡片样式 */\r\n.financial-overview {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.overview-card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  min-height: 120px;\r\n}\r\n\r\n.overview-card h3 {\r\n  margin: 0 0 10px 0;\r\n  color: #666;\r\n  font-size: 16px;\r\n}\r\n\r\n.amount {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.trend {\r\n  font-size: 14px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  display: inline-block;\r\n}\r\n\r\n.trend.up {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.trend.down {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n/* 图表区域样式 */\r\n.charts-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.chart-card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  position: relative;\r\n}\r\n\r\n.chart-card h3 {\r\n  margin: 0 0 20px 0;\r\n  color: #333;\r\n  font-size: 18px;\r\n}\r\n\r\n.chart {\r\n  height: 300px;\r\n  width: 100%;\r\n}\r\n\r\n.chart-loading {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 数据表格样式 */\r\n.data-table-container {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  position: relative;\r\n}\r\n\r\n.data-table-container h3 {\r\n  margin: 0 0 20px 0;\r\n  color: #333;\r\n  font-size: 18px;\r\n}\r\n\r\n.table-controls {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.date-range {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.date-input {\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.filter-select {\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  min-width: 120px;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  padding: 12px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f5f5f5;\r\n  font-weight: 500;\r\n}\r\n\r\n.type-badge {\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.type-badge.income {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.type-badge.expense {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.income-amount {\r\n  color: #2e7d32;\r\n}\r\n\r\n.expense-amount {\r\n  color: #c62828;\r\n}\r\n\r\n.table-loading {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 40px 0;\r\n  color: #666;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 3px solid #f3f3f3;\r\n  border-top: 3px solid #3498db;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.no-data {\r\n  text-align: center;\r\n  color: #666;\r\n  padding: 20px 0;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .charts-container {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .table-controls {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .date-range {\r\n    flex-wrap: wrap;\r\n  }\r\n  \r\n  .data-table {\r\n    display: block;\r\n    overflow-x: auto;\r\n  }\r\n}\r\n\r\n/* 支出管理样式 */\r\n.expense-manage {\r\n  margin-top: 20px;\r\n}\r\n\r\n.expense-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.expense-header h3 {\r\n  margin: 0;\r\n  font-size: 18px;\r\n}\r\n\r\n.add-button {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n}\r\n\r\n.add-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.filter-section {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n  background: white;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 40px;\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.expense-list {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.category-badge {\r\n  display: inline-block;\r\n  padding: 4px 8px;\r\n  background-color: #f5f5f5;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  color: #333;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.action-button {\r\n  border: none;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.action-button.edit {\r\n  background-color: #2196F3;\r\n  color: white;\r\n}\r\n\r\n.action-button.delete {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n/* 对话框样式 */\r\n.dialog-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.dialog-content {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  width: 400px;\r\n  max-width: 90%;\r\n}\r\n\r\n.dialog-content h3 {\r\n  margin-top: 0;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: 500;\r\n}\r\n\r\n.form-group input,\r\n.form-group select,\r\n.form-group textarea {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.form-buttons {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.cancel-button {\r\n  background-color: #f5f5f5;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.save-button {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.delete-button {\r\n  background-color: #f44336;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.delete-dialog {\r\n  width: 350px;\r\n}\r\n\r\n/* 功能切换标签样式 */\r\n.function-tabs {\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n  background: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.tab-button {\r\n  flex: 1;\r\n  padding: 12px;\r\n  border: none;\r\n  background: white;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  color: #666;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.tab-button.active {\r\n  background-color: #1976D2;\r\n  color: white;\r\n  font-weight: 500;\r\n}\r\n\r\n.tab-button:hover:not(.active) {\r\n  background-color: #f5f5f5;\r\n}\r\n</style>\r\n\r\n\r\n\r\n"],"mappings":";;;;AAoPA,YAAAA,OAAA;AACA,OAAAC,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACA;MACAC,aAAA;MACAC,cAAA;MACAC,aAAA;MACAC,WAAA;MACAC,YAAA;MACAC,WAAA;MAEA;MACAC,SAAA,OAAAC,mBAAA;MACAC,OAAA,OAAAC,iBAAA;MACAC,YAAA;MAEA;MACAC,UAAA;MACAC,cAAA;MACAC,eAAA;MAEA;MACAC,YAAA;MAEA;MACAC,QAAA;MACAC,iBAAA;MACAC,gBAAA;MACAC,cAAA;QACAC,EAAA;QACAC,WAAA;QACAC,QAAA;QACAC,MAAA;QACAC,IAAA;QACAC,SAAA;MACA;MACAC,iBAAA;MACAC,gBAAA;MACAC,eAAA;MAEA;MACAC,OAAA;QACAC,OAAA;QACAC,MAAA;QACAC,SAAA;QACAC,UAAA;QACAlB,YAAA;QACAC,QAAA;MACA;MAEA;MACAkB,UAAA;MAEA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACAC,qBAAA;MACA,YAAAtB,YAAA,CAAAuB,MAAA,CAAAC,IAAA;QACA;QACA,MAAAC,QAAA,OAAAC,IAAA,CAAAF,IAAA,CAAAG,IAAA,CAAAC,KAAA;QACA,MAAAC,YAAA,OAAAH,IAAA,MAAAlC,SAAA;QACA,MAAAsC,UAAA,OAAAJ,IAAA,MAAAhC,OAAA;;QAEA;QACAqC,OAAA,CAAAC,GAAA,YAAAR,IAAA,CAAAnB,EAAA,EAAAoB,QAAA,EAAAI,YAAA,IAAAJ,QAAA,EAAAA,QAAA,IAAAK,UAAA;QAEA,MAAAG,WAAA,GAAAJ,YAAA,IAAAJ,QAAA,IAAAA,QAAA,IAAAK,UAAA;QACA,MAAAI,SAAA,QAAAtC,YAAA,cAAA4B,IAAA,CAAAW,IAAA,UAAAvC,YAAA;QACA,OAAAqC,WAAA,IAAAC,SAAA;MACA;IACA;IACAE,iBAAA;MACA,YAAAnC,QAAA,CAAAsB,MAAA,CAAAc,OAAA;QACA;QACA,MAAA/B,WAAA,OAAAoB,IAAA,CAAAW,OAAA,CAAA/B,WAAA,CAAAsB,KAAA;QACA,MAAAC,YAAA,OAAAH,IAAA,MAAAlC,SAAA;QACA,MAAAsC,UAAA,OAAAJ,IAAA,MAAAhC,OAAA;QACA,MAAAuC,WAAA,GAAAJ,YAAA,IAAAvB,WAAA,IAAAA,WAAA,IAAAwB,UAAA;;QAEA;QACA,MAAAQ,aAAA,SAAAnC,gBAAA,IAAAkC,OAAA,CAAA9B,QAAA,UAAAJ,gBAAA;QAEA,OAAA8B,WAAA,IAAAK,aAAA;MACA;IACA;EACA;EACAC,KAAA;IACA/C,UAAA;MACA,KAAAgD,iBAAA;MACA,KAAAC,uBAAA;MACA,KAAAC,sBAAA;IACA;IACAhD,QAAA;MACA,KAAA8C,iBAAA;MACA,KAAAC,uBAAA;MACA,KAAAC,sBAAA;IACA;IACAvC,iBAAA;MACA;MACA4B,OAAA,CAAAC,GAAA,oBAAA7B,gBAAA;MACA,KAAAwC,aAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;IACA,KAAAC,SAAA;IACA,KAAAC,sBAAA;EACA;EACAC,OAAA;IACA;IACAvD,oBAAA;MACA;IACA;IAEA;IACAE,kBAAA;MACA;IACA;IAEA;IACAsD,eAAAtB,IAAA;MACA,OAAAA,IAAA;IACA;IAEA;IACAmB,UAAA;MACAf,OAAA,CAAAC,GAAA;MACA,KAAAkB,mBAAA;MACA,KAAAC,WAAA;MACA,KAAAT,sBAAA;MACA,KAAAD,uBAAA;MACA,KAAAD,iBAAA;MACA,KAAAG,aAAA;IACA;IAEA;IACA,MAAAO,oBAAA;MACA,KAAApC,OAAA,CAAAC,OAAA;MACA;QACAgB,OAAA,CAAAC,GAAA;QACA,MAAAoB,QAAA,SAAArE,KAAA,CAAAsE,GAAA,SAAAlC,UAAA;QACA,MAAAlC,IAAA,GAAAmE,QAAA,CAAAnE,IAAA;QACA8C,OAAA,CAAAC,GAAA,YAAA/C,IAAA;QAEA,KAAAC,aAAA,GAAAD,IAAA,CAAAC,aAAA;QACA,KAAAC,cAAA,GAAAF,IAAA,CAAAE,cAAA;QACA,KAAAC,aAAA,GAAAH,IAAA,CAAAG,aAAA;QACA,KAAAC,WAAA,GAAAJ,IAAA,CAAAI,WAAA;QACA,KAAAC,YAAA,GAAAL,IAAA,CAAAK,YAAA;QACA,KAAAC,WAAA,GAAAN,IAAA,CAAAM,WAAA;MACA,SAAA+D,KAAA;QACAvB,OAAA,CAAAuB,KAAA,gBAAAA,KAAA;QACA;QACAC,KAAA;MACA;QACA,KAAAzC,OAAA,CAAAC,OAAA;MACA;IACA;IAEA;IACA,MAAAoC,YAAA;MACA,KAAArC,OAAA,CAAAE,MAAA;MACA;QACAe,OAAA,CAAAC,GAAA;QACA,MAAAoB,QAAA,SAAArE,KAAA,CAAAsE,GAAA,SAAAlC,UAAA;QACA,MAAAlC,IAAA,GAAAmE,QAAA,CAAAnE,IAAA;QACA8C,OAAA,CAAAC,GAAA,UAAA/C,IAAA;;QAEA;QACA,KAAAuE,gBAAA,CAAAvE,IAAA,CAAAwE,MAAA,EAAAxE,IAAA,CAAAyE,MAAA,EAAAzE,IAAA,CAAAoD,OAAA,EAAApD,IAAA,CAAA0E,MAAA;MACA,SAAAL,KAAA;QACAvB,OAAA,CAAAuB,KAAA,cAAAA,KAAA;MACA;QACA,KAAAxC,OAAA,CAAAE,MAAA;MACA;IACA;IAEA;IACA,MAAA0B,uBAAA;MACA,KAAA5B,OAAA,CAAAG,SAAA;MACA;QACAc,OAAA,CAAAC,GAAA;QAEA,MAAA4B,aAAA,QAAAX,cAAA,MAAAzD,SAAA;QACA,MAAAqE,WAAA,QAAAZ,cAAA,MAAAvD,OAAA;;QAEA;QACA,MAAA0D,QAAA,SAAArE,KAAA,CAAAsE,GAAA,SAAAlC,UAAA;UACA2C,MAAA;YACAtE,SAAA,EAAAoE,aAAA;YACAlE,OAAA,EAAAmE;UACA;QACA;QAEA,MAAAE,gBAAA,GAAAX,QAAA,CAAAnE,IAAA;QACA8C,OAAA,CAAAC,GAAA,YAAA+B,gBAAA;;QAEA;QACA,MAAAC,kBAAA,GAAAD,gBAAA,CAAAxC,MAAA,CAAA0C,WAAA,IAAAA,WAAA,CAAA9B,IAAA;;QAEA;QACA,MAAA+B,gBAAA;QACA,IAAAC,WAAA;QAEA,WAAAF,WAAA,IAAAD,kBAAA;UACA,MAAAzD,QAAA,GAAA0D,WAAA,CAAA1D,QAAA;UACA,KAAA2D,gBAAA,CAAA3D,QAAA;YACA2D,gBAAA,CAAA3D,QAAA;UACA;UACA2D,gBAAA,CAAA3D,QAAA,KAAA0D,WAAA,CAAAzD,MAAA;UACA2D,WAAA,IAAAF,WAAA,CAAAzD,MAAA;QACA;;QAEA;QACA,MAAA4D,SAAA;QACA,YAAA7D,QAAA,EAAAC,MAAA,KAAA6D,MAAA,CAAAC,OAAA,CAAAJ,gBAAA;UACA,MAAAK,UAAA,GAAA/D,MAAA,GAAA2D,WAAA;UACAC,SAAA,CAAAI,IAAA;YACAxF,IAAA,EAAAuB,QAAA;YACAkE,KAAA,EAAAjE,MAAA,CAAAkE,OAAA;YACAH,UAAA,EAAAA,UAAA,CAAAG,OAAA;UACA;QACA;;QAEA;QACAN,SAAA,CAAAO,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAA,CAAA,CAAAJ,KAAA,GAAAG,CAAA,CAAAH,KAAA;;QAEA;QACA,IAAAL,SAAA,CAAAU,MAAA;UACAV,SAAA,CAAAI,IAAA;YAAAxF,IAAA;YAAAyF,KAAA;YAAAF,UAAA;UAAA;QACA;QAEAxC,OAAA,CAAAC,GAAA,gBAAAoC,SAAA;;QAEA;QACA,KAAAW,oBAAA,CAAAX,SAAA;MACA,SAAAd,KAAA;QACAvB,OAAA,CAAAuB,KAAA,gBAAAA,KAAA;QACA,IAAAA,KAAA,CAAAF,QAAA;UACArB,OAAA,CAAAuB,KAAA,WAAAA,KAAA,CAAAF,QAAA,CAAA4B,MAAA;UACAjD,OAAA,CAAAuB,KAAA,UAAAA,KAAA,CAAAF,QAAA,CAAAnE,IAAA;QACA;MACA;QACA,KAAA6B,OAAA,CAAAG,SAAA;MACA;IACA;IAEA;IACA,MAAAwB,wBAAA;MACA,KAAA3B,OAAA,CAAAI,UAAA;MACA;QACAa,OAAA,CAAAC,GAAA;QAEA,MAAA4B,aAAA,QAAAX,cAAA,MAAAzD,SAAA;QACA,MAAAqE,WAAA,QAAAZ,cAAA,MAAAvD,OAAA;;QAEA;QACA,MAAA0D,QAAA,SAAArE,KAAA,CAAAsE,GAAA,SAAAlC,UAAA;UACA2C,MAAA;YACAtE,SAAA,EAAAoE,aAAA;YACAlE,OAAA,EAAAmE;UACA;QACA;QAEA,MAAAoB,YAAA,GAAA7B,QAAA,CAAAnE,IAAA;QACA8C,OAAA,CAAAC,GAAA,YAAAiD,YAAA;;QAEA;QACA,MAAAC,iBAAA;QACA,IAAAC,YAAA;QAEA,WAAA9C,OAAA,IAAA4C,YAAA;UACA,MAAA1E,QAAA,GAAA8B,OAAA,CAAA9B,QAAA;UACA,KAAA2E,iBAAA,CAAA3E,QAAA;YACA2E,iBAAA,CAAA3E,QAAA;UACA;UACA2E,iBAAA,CAAA3E,QAAA,KAAA8B,OAAA,CAAA7B,MAAA;UACA2E,YAAA,IAAA9C,OAAA,CAAA7B,MAAA;QACA;;QAEA;QACA,MAAA4D,SAAA;QACA,YAAA7D,QAAA,EAAAC,MAAA,KAAA6D,MAAA,CAAAC,OAAA,CAAAY,iBAAA;UACA,MAAAX,UAAA,GAAA/D,MAAA,GAAA2E,YAAA;UACAf,SAAA,CAAAI,IAAA;YACAxF,IAAA,EAAAuB,QAAA;YACAkE,KAAA,EAAAjE,MAAA,CAAAkE,OAAA;YACAH,UAAA,EAAAA,UAAA,CAAAG,OAAA;UACA;QACA;;QAEA;QACAN,SAAA,CAAAO,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAA,CAAA,CAAAJ,KAAA,GAAAG,CAAA,CAAAH,KAAA;;QAEA;QACA,IAAAL,SAAA,CAAAU,MAAA;UACAV,SAAA,CAAAI,IAAA;YAAAxF,IAAA;YAAAyF,KAAA;YAAAF,UAAA;UAAA;QACA;QAEAxC,OAAA,CAAAC,GAAA,gBAAAoC,SAAA;;QAEA;QACA,KAAAgB,qBAAA,CAAAhB,SAAA;MACA,SAAAd,KAAA;QACAvB,OAAA,CAAAuB,KAAA,gBAAAA,KAAA;QACA,IAAAA,KAAA,CAAAF,QAAA;UACArB,OAAA,CAAAuB,KAAA,WAAAA,KAAA,CAAAF,QAAA,CAAA4B,MAAA;UACAjD,OAAA,CAAAuB,KAAA,UAAAA,KAAA,CAAAF,QAAA,CAAAnE,IAAA;QACA;MACA;QACA,KAAA6B,OAAA,CAAAI,UAAA;MACA;IACA;IAEA;IACA,MAAAsB,kBAAA;MACA,KAAA1B,OAAA,CAAAd,YAAA;MACA;QACA+B,OAAA,CAAAC,GAAA;QACAD,OAAA,CAAAC,GAAA,eAAAxC,SAAA,YAAAE,OAAA;QAEA,MAAAkE,aAAA,QAAAX,cAAA,MAAAzD,SAAA;QACA,MAAAqE,WAAA,QAAAZ,cAAA,MAAAvD,OAAA;;QAEA;QACAqC,OAAA,CAAAC,GAAA;QACA,MAAAqD,eAAA,SAAAtG,KAAA,CAAAsE,GAAA,SAAAlC,UAAA;UACA2C,MAAA;YACAtE,SAAA,EAAAoE,aAAA;YACAlE,OAAA,EAAAmE;UACA;QACA;QACA9B,OAAA,CAAAC,GAAA,YAAAqD,eAAA,CAAApG,IAAA;;QAEA;QACA8C,OAAA,CAAAC,GAAA;QACA,MAAAsD,cAAA,SAAAvG,KAAA,CAAAsE,GAAA,SAAAlC,UAAA;UACA2C,MAAA;YACAtE,SAAA,EAAAoE,aAAA;YACAlE,OAAA,EAAAmE;UACA;QACA;QACA9B,OAAA,CAAAC,GAAA,YAAAsD,cAAA,CAAArG,IAAA;;QAEA;QACA,MAAAgB,QAAA,GAAAoF,eAAA,CAAApG,IAAA,CAAAsG,GAAA,CAAAlD,OAAA;UACAhC,EAAA,EAAAgC,OAAA,CAAAhC,EAAA;UACAsB,IAAA,EAAAU,OAAA,CAAA/B,WAAA;UACA6B,IAAA;UACA5B,QAAA,EAAA8B,OAAA,CAAA9B,QAAA;UACAC,MAAA,EAAA6B,OAAA,CAAA7B,MAAA;UACAC,IAAA,EAAA4B,OAAA,CAAA5B;QACA;;QAEA;QACA,MAAA+E,OAAA,GAAAF,cAAA,CAAArG,IAAA,CAAAsG,GAAA,CAAA7B,MAAA;UACArD,EAAA,EAAAqD,MAAA,CAAArD,EAAA;UACAsB,IAAA,EAAA+B,MAAA,CAAA/B,IAAA;UACAQ,IAAA;UACA5B,QAAA,EAAAmD,MAAA,CAAAnD,QAAA;UACAC,MAAA,EAAAkD,MAAA,CAAAlD,MAAA;UACAC,IAAA,EAAAiD,MAAA,CAAAjD;QACA;;QAEA;QACA,KAAAT,YAAA,OAAAC,QAAA,KAAAuF,OAAA,EAAAb,IAAA,EAAAC,CAAA,EAAAC,CAAA;UACA,WAAAnD,IAAA,CAAAmD,CAAA,CAAAlD,IAAA,QAAAD,IAAA,CAAAkD,CAAA,CAAAjD,IAAA;QACA;QAEAI,OAAA,CAAAC,GAAA,mBAAAhC,YAAA;MACA,SAAAsD,KAAA;QACAvB,OAAA,CAAAuB,KAAA,gBAAAA,KAAA;QACA,IAAAA,KAAA,CAAAF,QAAA;UACArB,OAAA,CAAAuB,KAAA,WAAAA,KAAA,CAAAF,QAAA,CAAA4B,MAAA;UACAjD,OAAA,CAAAuB,KAAA,UAAAA,KAAA,CAAAF,QAAA,CAAAnE,IAAA;QACA;QACA,KAAAe,YAAA;MACA;QACA,KAAAc,OAAA,CAAAd,YAAA;MACA;IACA;IAEA;IACA,MAAA2C,cAAA;MACA,KAAA7B,OAAA,CAAAb,QAAA;MACA;QACA8B,OAAA,CAAAC,GAAA;QAEA,MAAA4B,aAAA,QAAAX,cAAA,MAAAzD,SAAA;QACA,MAAAqE,WAAA,QAAAZ,cAAA,MAAAvD,OAAA;QAEA,MAAA0D,QAAA,SAAArE,KAAA,CAAAsE,GAAA,SAAAlC,UAAA;UACA2C,MAAA;YACAtE,SAAA,EAAAoE,aAAA;YACAlE,OAAA,EAAAmE,WAAA;YACAtD,QAAA,OAAAJ,gBAAA,IAAAsF;UACA;QACA;QAEA,KAAAxF,QAAA,GAAAmD,QAAA,CAAAnE,IAAA;QACA8C,OAAA,CAAAC,GAAA,eAAA/B,QAAA;MACA,SAAAqD,KAAA;QACAvB,OAAA,CAAAuB,KAAA,cAAAA,KAAA;QACA,IAAAA,KAAA,CAAAF,QAAA;UACArB,OAAA,CAAAuB,KAAA,WAAAA,KAAA,CAAAF,QAAA,CAAA4B,MAAA;UACAjD,OAAA,CAAAuB,KAAA,UAAAA,KAAA,CAAAF,QAAA,CAAAnE,IAAA;QACA;QACA,KAAAgB,QAAA;MACA;QACA,KAAAa,OAAA,CAAAb,QAAA;MACA;IACA;IAEA;IACA,MAAA8C,uBAAA;MACA;QACAhB,OAAA,CAAAC,GAAA;QACA,MAAAoB,QAAA,SAAArE,KAAA,CAAAsE,GAAA,SAAAlC,UAAA;QACA,KAAAjB,iBAAA,GAAAkD,QAAA,CAAAnE,IAAA;QACA8C,OAAA,CAAAC,GAAA,eAAA9B,iBAAA;MACA,SAAAoD,KAAA;QACAvB,OAAA,CAAAuB,KAAA,cAAAA,KAAA;QACA;QACA,KAAApD,iBAAA;MACA;IACA;IAEA;IACA2C,WAAA;MACA;MACA,KAAAhD,UAAA,GAAAf,OAAA,CAAA4G,IAAA,MAAAC,KAAA,CAAA9F,UAAA;;MAEA;MACA,KAAAC,cAAA,GAAAhB,OAAA,CAAA4G,IAAA,MAAAC,KAAA,CAAA7F,cAAA;;MAEA;MACA,KAAAC,eAAA,GAAAjB,OAAA,CAAA4G,IAAA,MAAAC,KAAA,CAAA5F,eAAA;;MAEA;MACA6F,MAAA,CAAAC,gBAAA,gBAAAC,YAAA;IACA;IAEA;IACAtC,iBAAAC,MAAA,EAAAsC,UAAA,EAAAC,WAAA,EAAAC,UAAA;MACA,KAAApG,UAAA,CAAAqG,SAAA;QACAC,KAAA;UACAC,IAAA;QACA;QACAC,OAAA;UACAC,OAAA;QACA;QACAC,MAAA;UACAtH,IAAA;QACA;QACAuH,KAAA;UACArE,IAAA;UACAlD,IAAA,EAAAwE;QACA;QACAgD,KAAA;UACAtE,IAAA;QACA;QACAuE,MAAA,GACA;UACA1H,IAAA;UACAmD,IAAA;UACAlD,IAAA,EAAA8G;QACA,GACA;UACA/G,IAAA;UACAmD,IAAA;UACAlD,IAAA,EAAA+G;QACA,GACA;UACAhH,IAAA;UACAmD,IAAA;UACAlD,IAAA,EAAAgH;QACA;MAEA;IACA;IAEA;IACAlB,qBAAA9F,IAAA;MACA,MAAAmF,SAAA,GAAAnF,IAAA,CAAAsG,GAAA,CAAA/D,IAAA;QACAxC,IAAA,EAAAwC,IAAA,CAAAxC,IAAA;QACAyF,KAAA,EAAAkC,UAAA,CAAAnF,IAAA,CAAAiD,KAAA;MACA;MAEA,KAAA3E,cAAA,CAAAoG,SAAA;QACAC,KAAA;UACAC,IAAA;QACA;QACAC,OAAA;UACAC,OAAA;UACAM,SAAA;QACA;QACAL,MAAA;UACAM,MAAA;UACAC,IAAA;UACA3E,IAAA;QACA;QACAuE,MAAA,GACA;UACA1H,IAAA;UACAmD,IAAA;UACA4E,MAAA;UACA9H,IAAA,EAAAmF,SAAA;UACA4C,QAAA;YACAC,SAAA;cACAC,UAAA;cACAC,aAAA;cACAC,WAAA;YACA;UACA;UACAC,KAAA;YACAC,IAAA;YACAV,SAAA;UACA;QACA;MAEA;IACA;IAEA;IACAxB,sBAAAnG,IAAA;MACA,MAAAmF,SAAA,GAAAnF,IAAA,CAAAsG,GAAA,CAAA/D,IAAA;QACAxC,IAAA,EAAAwC,IAAA,CAAAxC,IAAA;QACAyF,KAAA,EAAAkC,UAAA,CAAAnF,IAAA,CAAAiD,KAAA;MACA;MAEA,KAAA1E,eAAA,CAAAmG,SAAA;QACAC,KAAA;UACAC,IAAA;QACA;QACAC,OAAA;UACAC,OAAA;UACAM,SAAA;QACA;QACAL,MAAA;UACAM,MAAA;UACAC,IAAA;UACA3E,IAAA;QACA;QACAuE,MAAA,GACA;UACA1H,IAAA;UACAmD,IAAA;UACA4E,MAAA;UACA9H,IAAA,EAAAmF,SAAA;UACA4C,QAAA;YACAC,SAAA;cACAC,UAAA;cACAC,aAAA;cACAC,WAAA;YACA;UACA;UACAC,KAAA;YACAC,IAAA;YACAV,SAAA;UACA;QACA;MAEA;IACA;IAEAd,aAAA;MACA,KAAAjG,UAAA,EAAA0H,MAAA;MACA,KAAAzH,cAAA,EAAAyH,MAAA;MACA,KAAAxH,eAAA,EAAAwH,MAAA;IACA;IAEAC,aAAAC,GAAA;MACA,OAAAA,GAAA,CAAAC,cAAA;QACAC,qBAAA;QACAC,qBAAA;MACA;IACA;IAEAC,WAAAC,OAAA;MACA,MAAAnG,IAAA,OAAAD,IAAA,CAAAoG,OAAA;MACA,OAAAnG,IAAA,CAAAoG,kBAAA;IACA;IAEA;IACAC,kBAAA3F,OAAA;MACA,IAAAA,OAAA;QACA;QACA,KAAAjC,cAAA;UACAC,EAAA,EAAAgC,OAAA,CAAAhC,EAAA;UACAC,WAAA,EAAA+B,OAAA,CAAA/B,WAAA,CAAAsB,KAAA;UACArB,QAAA,EAAA8B,OAAA,CAAA9B,QAAA;UACAC,MAAA,EAAA6B,OAAA,CAAA7B,MAAA;UACAC,IAAA,EAAA4B,OAAA,CAAA5B,IAAA;UACAC,SAAA,EAAA2B,OAAA,CAAA3B;QACA;MACA;QACA;QACA,MAAAuH,KAAA,OAAAvG,IAAA,GAAAwG,WAAA,GAAAtG,KAAA;QACA,KAAAxB,cAAA;UACAC,EAAA;UACAC,WAAA,EAAA2H,KAAA;UACA1H,QAAA,OAAAL,iBAAA,CAAA4E,MAAA,YAAA5E,iBAAA;UACAM,MAAA;UACAC,IAAA;UACAC,SAAA;QACA;MACA;MACA,KAAAC,iBAAA;IACA;IAEA;IACA,MAAAwH,YAAA;MACA;QACApG,OAAA,CAAAC,GAAA,eAAA5B,cAAA;QAEA,MAAA4F,WAAA;UACA,QAAA5F,cAAA;UACAE,WAAA,OAAA2C,cAAA,MAAA7C,cAAA,CAAAE,WAAA;UACAE,MAAA,EAAAmG,UAAA,MAAAvG,cAAA,CAAAI,MAAA;QACA;QAEA,IAAA4C,QAAA;QAEA,SAAAhD,cAAA,CAAAC,EAAA;UACA;UACA+C,QAAA,SAAArE,KAAA,CAAAqJ,GAAA,SAAAjH,UAAA,kBAAAf,cAAA,CAAAC,EAAA,IAAA2F,WAAA;UACAjE,OAAA,CAAAC,GAAA,YAAAoB,QAAA,CAAAnE,IAAA;QACA;UACA;UACAmE,QAAA,SAAArE,KAAA,CAAAsJ,IAAA,SAAAlH,UAAA,aAAA6E,WAAA;UACAjE,OAAA,CAAAC,GAAA,YAAAoB,QAAA,CAAAnE,IAAA;QACA;;QAEA;QACA,KAAA0B,iBAAA;QACA,KAAAgC,aAAA;QACA,KAAAF,uBAAA;QACA,KAAAS,mBAAA;QACA,KAAAC,WAAA;MACA,SAAAG,KAAA;QACAvB,OAAA,CAAAuB,KAAA,YAAAA,KAAA;QACA,IAAAA,KAAA,CAAAF,QAAA;UACArB,OAAA,CAAAuB,KAAA,WAAAA,KAAA,CAAAF,QAAA,CAAA4B,MAAA;UACAjD,OAAA,CAAAuB,KAAA,UAAAA,KAAA,CAAAF,QAAA,CAAAnE,IAAA;UACAsE,KAAA,YAAAD,KAAA,CAAAF,QAAA,CAAAnE,IAAA,CAAAqJ,OAAA;QACA;UACA/E,KAAA;QACA;MACA;IACA;IAEA;IACAgF,qBAAAlG,OAAA;MACA,KAAAxB,eAAA,GAAAwB,OAAA;MACA,KAAAzB,gBAAA;IACA;IAEA;IACA,MAAA4H,cAAA;MACA;QACAzG,OAAA,CAAAC,GAAA,eAAAnB,eAAA;QAEA,MAAAuC,QAAA,SAAArE,KAAA,CAAA0J,MAAA,SAAAtH,UAAA,kBAAAN,eAAA,CAAAR,EAAA;QACA0B,OAAA,CAAAC,GAAA,YAAAoB,QAAA,CAAAnE,IAAA;;QAEA;QACA,KAAA2B,gBAAA;QACA,KAAAC,eAAA;QACA,KAAA8B,aAAA;QACA,KAAAF,uBAAA;QACA,KAAAS,mBAAA;QACA,KAAAC,WAAA;MACA,SAAAG,KAAA;QACAvB,OAAA,CAAAuB,KAAA,YAAAA,KAAA;QACA,IAAAA,KAAA,CAAAF,QAAA;UACArB,OAAA,CAAAuB,KAAA,WAAAA,KAAA,CAAAF,QAAA,CAAA4B,MAAA;UACAjD,OAAA,CAAAuB,KAAA,UAAAA,KAAA,CAAAF,QAAA,CAAAnE,IAAA;UACAsE,KAAA,YAAAD,KAAA,CAAAF,QAAA,CAAAnE,IAAA,CAAAqJ,OAAA;QACA;UACA/E,KAAA;QACA;MACA;IACA;EACA;EACAmF,cAAA;IACA9C,MAAA,CAAA+C,mBAAA,gBAAA7C,YAAA;IACA,KAAAjG,UAAA,EAAA+I,OAAA;IACA,KAAA9I,cAAA,EAAA8I,OAAA;IACA,KAAA7I,eAAA,EAAA6I,OAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}