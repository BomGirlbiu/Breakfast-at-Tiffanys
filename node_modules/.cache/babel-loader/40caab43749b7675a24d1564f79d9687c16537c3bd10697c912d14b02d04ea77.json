{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  name: 'FinancialPage',\n  data() {\n    return {\n      // 概览数据\n      monthlyIncome: 0,\n      monthlyExpense: 0,\n      monthlyProfit: 0,\n      incomeTrend: 0,\n      expenseTrend: 0,\n      profitTrend: 0,\n      // 日期范围\n      startDate: this.getDefaultStartDate(),\n      endDate: this.getDefaultEndDate(),\n      selectedType: 'all',\n      // 图表实例\n      trendChart: null,\n      incomePieChart: null,\n      expensePieChart: null,\n      // 交易数据\n      transactions: [],\n      // 加载状态\n      loading: {\n        summary: false,\n        trends: false,\n        incomePie: false,\n        expensePie: false,\n        transactions: false\n      },\n      // API基础URL\n      apiBaseUrl: 'http://localhost:5050/api'\n    };\n  },\n  computed: {\n    filteredTransactions() {\n      return this.transactions.filter(item => {\n        const dateInRange = item.date >= this.startDate && item.date <= this.endDate;\n        const typeMatch = this.selectedType === 'all' || item.type === this.selectedType;\n        return dateInRange && typeMatch;\n      });\n    }\n  },\n  watch: {\n    startDate() {\n      this.fetchTransactions();\n    },\n    endDate() {\n      this.fetchTransactions();\n    }\n  },\n  mounted() {\n    this.initCharts();\n    this.fetchData();\n  },\n  methods: {\n    // 获取默认开始日期（当年1月1日）\n    getDefaultStartDate() {\n      const now = new Date();\n      return `${now.getFullYear()}-01-01`;\n    },\n    // 获取默认结束日期（当前日期）\n    getDefaultEndDate() {\n      const now = new Date();\n      const year = now.getFullYear();\n      const month = String(now.getMonth() + 1).padStart(2, '0');\n      const day = String(now.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    // 获取所有数据\n    fetchData() {\n      this.fetchMonthlySummary();\n      this.fetchTrends();\n      this.fetchIncomeComposition();\n      this.fetchExpenseComposition();\n      this.fetchTransactions();\n    },\n    // 获取月度概览数据\n    async fetchMonthlySummary() {\n      this.loading.summary = true;\n      try {\n        const response = await axios.get(`${this.apiBaseUrl}/finance/monthly-summary`);\n        const data = response.data;\n        this.monthlyIncome = data.monthlyIncome;\n        this.monthlyExpense = data.monthlyExpense;\n        this.monthlyProfit = data.monthlyProfit;\n        this.incomeTrend = data.incomeTrend;\n        this.expenseTrend = data.expenseTrend;\n        this.profitTrend = data.profitTrend;\n      } catch (error) {\n        console.error('获取月度概览数据失败:', error);\n      } finally {\n        this.loading.summary = false;\n      }\n    },\n    // 获取趋势数据\n    async fetchTrends() {\n      this.loading.trends = true;\n      try {\n        const response = await axios.get(`${this.apiBaseUrl}/finance/trends`);\n        const data = response.data;\n\n        // 更新趋势图\n        this.updateTrendChart(data.labels, data.income, data.expense, data.profit);\n      } catch (error) {\n        console.error('获取趋势数据失败:', error);\n      } finally {\n        this.loading.trends = false;\n      }\n    },\n    // 获取收入构成数据\n    async fetchIncomeComposition() {\n      this.loading.incomePie = true;\n      try {\n        const response = await axios.get(`${this.apiBaseUrl}/finance/income-composition`);\n        const data = response.data;\n\n        // 更新收入饼图\n        this.updateIncomePieChart(data);\n      } catch (error) {\n        console.error('获取收入构成数据失败:', error);\n      } finally {\n        this.loading.incomePie = false;\n      }\n    },\n    // 获取支出构成数据\n    async fetchExpenseComposition() {\n      this.loading.expensePie = true;\n      try {\n        const response = await axios.get(`${this.apiBaseUrl}/finance/expense-composition`);\n        const data = response.data;\n\n        // 更新支出饼图\n        this.updateExpensePieChart(data);\n      } catch (error) {\n        console.error('获取支出构成数据失败:', error);\n      } finally {\n        this.loading.expensePie = false;\n      }\n    },\n    // 获取交易明细数据\n    async fetchTransactions() {\n      this.loading.transactions = true;\n      try {\n        const response = await axios.get(`${this.apiBaseUrl}/finance/transactions`, {\n          params: {\n            startDate: this.startDate,\n            endDate: this.endDate\n          }\n        });\n        this.transactions = response.data;\n      } catch (error) {\n        console.error('获取交易明细数据失败:', error);\n        this.transactions = [];\n      } finally {\n        this.loading.transactions = false;\n      }\n    },\n    // 初始化图表\n    initCharts() {\n      // 初始化趋势图\n      this.trendChart = echarts.init(this.$refs.trendChart);\n\n      // 初始化收入构成饼图\n      this.incomePieChart = echarts.init(this.$refs.incomePieChart);\n\n      // 初始化支出构成饼图\n      this.expensePieChart = echarts.init(this.$refs.expensePieChart);\n\n      // 监听窗口大小变化，调整图表大小\n      window.addEventListener('resize', this.handleResize);\n    },\n    // 更新趋势图\n    updateTrendChart(labels, incomeData, expenseData, profitData) {\n      this.trendChart.setOption({\n        title: {\n          text: '近6个月收支趋势'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['收入', '支出', '利润']\n        },\n        xAxis: {\n          type: 'category',\n          data: labels\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          name: '收入',\n          type: 'line',\n          data: incomeData\n        }, {\n          name: '支出',\n          type: 'line',\n          data: expenseData\n        }, {\n          name: '利润',\n          type: 'line',\n          data: profitData\n        }]\n      });\n    },\n    // 更新收入构成饼图\n    updateIncomePieChart(data) {\n      this.incomePieChart.setOption({\n        title: {\n          text: '收入构成'\n        },\n        tooltip: {\n          trigger: 'item'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left'\n        },\n        series: [{\n          type: 'pie',\n          radius: '50%',\n          data: data,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }]\n      });\n    },\n    // 更新支出构成饼图\n    updateExpensePieChart(data) {\n      this.expensePieChart.setOption({\n        title: {\n          text: '支出构成'\n        },\n        tooltip: {\n          trigger: 'item'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left'\n        },\n        series: [{\n          type: 'pie',\n          radius: '50%',\n          data: data,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }]\n      });\n    },\n    handleResize() {\n      this.trendChart?.resize();\n      this.incomePieChart?.resize();\n      this.expensePieChart?.resize();\n    },\n    formatNumber(num) {\n      return num.toLocaleString('zh-CN', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    },\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('zh-CN');\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n    this.trendChart?.dispose();\n    this.incomePieChart?.dispose();\n    this.expensePieChart?.dispose();\n  }\n};","map":{"version":3,"names":["echarts","axios","name","data","monthlyIncome","monthlyExpense","monthlyProfit","incomeTrend","expenseTrend","profitTrend","startDate","getDefaultStartDate","endDate","getDefaultEndDate","selectedType","trendChart","incomePieChart","expensePieChart","transactions","loading","summary","trends","incomePie","expensePie","apiBaseUrl","computed","filteredTransactions","filter","item","dateInRange","date","typeMatch","type","watch","fetchTransactions","mounted","initCharts","fetchData","methods","now","Date","getFullYear","year","month","String","getMonth","padStart","day","getDate","fetchMonthlySummary","fetchTrends","fetchIncomeComposition","fetchExpenseComposition","response","get","error","console","updateTrendChart","labels","income","expense","profit","updateIncomePieChart","updateExpensePieChart","params","init","$refs","window","addEventListener","handleResize","incomeData","expenseData","profitData","setOption","title","text","tooltip","trigger","legend","xAxis","yAxis","series","orient","left","radius","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","resize","formatNumber","num","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatDate","dateStr","toLocaleDateString","beforeDestroy","removeEventListener","dispose"],"sources":["src/components/FinancialPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"financial-page\">\r\n    <h1 class=\"page-title\">财务分析</h1>\r\n    \r\n    <!-- 财务概览卡片 -->\r\n    <div class=\"financial-overview\">\r\n      <div class=\"overview-card income\">\r\n        <h3>本月收入</h3>\r\n        <div v-if=\"loading.summary\" class=\"loading-spinner\"></div>\r\n        <template v-else>\r\n          <div class=\"amount\">¥{{ formatNumber(monthlyIncome) }}</div>\r\n          <div class=\"trend\" :class=\"{ 'up': incomeTrend > 0, 'down': incomeTrend < 0 }\">\r\n            {{ incomeTrend > 0 ? '+' : '' }}{{ incomeTrend }}%\r\n          </div>\r\n        </template>\r\n      </div>\r\n      <div class=\"overview-card expense\">\r\n        <h3>本月支出</h3>\r\n        <div v-if=\"loading.summary\" class=\"loading-spinner\"></div>\r\n        <template v-else>\r\n          <div class=\"amount\">¥{{ formatNumber(monthlyExpense) }}</div>\r\n          <div class=\"trend\" :class=\"{ 'up': expenseTrend > 0, 'down': expenseTrend < 0 }\">\r\n            {{ expenseTrend > 0 ? '+' : '' }}{{ expenseTrend }}%\r\n          </div>\r\n        </template>\r\n      </div>\r\n      <div class=\"overview-card profit\">\r\n        <h3>本月利润</h3>\r\n        <div v-if=\"loading.summary\" class=\"loading-spinner\"></div>\r\n        <template v-else>\r\n          <div class=\"amount\">¥{{ formatNumber(monthlyProfit) }}</div>\r\n          <div class=\"trend\" :class=\"{ 'up': profitTrend > 0, 'down': profitTrend < 0 }\">\r\n            {{ profitTrend > 0 ? '+' : '' }}{{ profitTrend }}%\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 图表区域 -->\r\n    <div class=\"charts-container\">\r\n      <!-- 收入支出趋势图 -->\r\n      <div class=\"chart-card\">\r\n        <h3>收入支出趋势</h3>\r\n        <div v-if=\"loading.trends\" class=\"chart-loading\">加载中...</div>\r\n        <div ref=\"trendChart\" class=\"chart\"></div>\r\n      </div>\r\n      \r\n      <!-- 收入构成饼图 -->\r\n      <div class=\"chart-card\">\r\n        <h3>收入构成</h3>\r\n        <div v-if=\"loading.incomePie\" class=\"chart-loading\">加载中...</div>\r\n        <div ref=\"incomePieChart\" class=\"chart\"></div>\r\n      </div>\r\n      \r\n      <!-- 支出构成饼图 -->\r\n      <div class=\"chart-card\">\r\n        <h3>支出构成</h3>\r\n        <div v-if=\"loading.expensePie\" class=\"chart-loading\">加载中...</div>\r\n        <div ref=\"expensePieChart\" class=\"chart\"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 详细数据表格 -->\r\n    <div class=\"data-table-container\">\r\n      <h3>财务明细</h3>\r\n      <div class=\"table-controls\">\r\n        <div class=\"date-range\">\r\n          <input type=\"date\" v-model=\"startDate\" class=\"date-input\">\r\n          <span>至</span>\r\n          <input type=\"date\" v-model=\"endDate\" class=\"date-input\">\r\n        </div>\r\n        <div class=\"table-filters\">\r\n          <select v-model=\"selectedType\" class=\"filter-select\">\r\n            <option value=\"all\">全部类型</option>\r\n            <option value=\"income\">收入</option>\r\n            <option value=\"expense\">支出</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      \r\n      <div v-if=\"loading.transactions\" class=\"table-loading\">\r\n        <div class=\"loading-spinner\"></div>\r\n        <div>加载交易数据中...</div>\r\n      </div>\r\n      \r\n      <table v-else class=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>日期</th>\r\n            <th>类型</th>\r\n            <th>分类</th>\r\n            <th>金额</th>\r\n            <th>备注</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"item in filteredTransactions\" :key=\"item.id\">\r\n            <td>{{ formatDate(item.date) }}</td>\r\n            <td>\r\n              <span :class=\"['type-badge', item.type]\">\r\n                {{ item.type === 'income' ? '收入' : '支出' }}\r\n              </span>\r\n            </td>\r\n            <td>{{ item.category }}</td>\r\n            <td :class=\"item.type === 'income' ? 'income-amount' : 'expense-amount'\">\r\n              {{ item.type === 'income' ? '+' : '-' }}¥{{ formatNumber(item.amount) }}\r\n            </td>\r\n            <td>{{ item.note }}</td>\r\n          </tr>\r\n          <tr v-if=\"filteredTransactions.length === 0\">\r\n            <td colspan=\"5\" class=\"no-data\">没有符合条件的交易记录</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'FinancialPage',\r\n  data() {\r\n    return {\r\n      // 概览数据\r\n      monthlyIncome: 0,\r\n      monthlyExpense: 0,\r\n      monthlyProfit: 0,\r\n      incomeTrend: 0,\r\n      expenseTrend: 0,\r\n      profitTrend: 0,\r\n\r\n      // 日期范围\r\n      startDate: this.getDefaultStartDate(),\r\n      endDate: this.getDefaultEndDate(),\r\n      selectedType: 'all',\r\n\r\n      // 图表实例\r\n      trendChart: null,\r\n      incomePieChart: null,\r\n      expensePieChart: null,\r\n\r\n      // 交易数据\r\n      transactions: [],\r\n      \r\n      // 加载状态\r\n      loading: {\r\n        summary: false,\r\n        trends: false,\r\n        incomePie: false,\r\n        expensePie: false,\r\n        transactions: false\r\n      },\r\n      \r\n      // API基础URL\r\n      apiBaseUrl: 'http://localhost:5050/api'\r\n    }\r\n  },\r\n  computed: {\r\n    filteredTransactions() {\r\n      return this.transactions.filter(item => {\r\n        const dateInRange = item.date >= this.startDate && item.date <= this.endDate\r\n        const typeMatch = this.selectedType === 'all' || item.type === this.selectedType\r\n        return dateInRange && typeMatch\r\n      })\r\n    }\r\n  },\r\n  watch: {\r\n    startDate() {\r\n      this.fetchTransactions()\r\n    },\r\n    endDate() {\r\n      this.fetchTransactions()\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initCharts()\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n    // 获取默认开始日期（当年1月1日）\r\n    getDefaultStartDate() {\r\n      const now = new Date()\r\n      return `${now.getFullYear()}-01-01`\r\n    },\r\n    \r\n    // 获取默认结束日期（当前日期）\r\n    getDefaultEndDate() {\r\n      const now = new Date()\r\n      const year = now.getFullYear()\r\n      const month = String(now.getMonth() + 1).padStart(2, '0')\r\n      const day = String(now.getDate()).padStart(2, '0')\r\n      return `${year}-${month}-${day}`\r\n    },\r\n    \r\n    // 获取所有数据\r\n    fetchData() {\r\n      this.fetchMonthlySummary()\r\n      this.fetchTrends()\r\n      this.fetchIncomeComposition()\r\n      this.fetchExpenseComposition()\r\n      this.fetchTransactions()\r\n    },\r\n    \r\n    // 获取月度概览数据\r\n    async fetchMonthlySummary() {\r\n      this.loading.summary = true\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/finance/monthly-summary`)\r\n        const data = response.data\r\n        \r\n        this.monthlyIncome = data.monthlyIncome\r\n        this.monthlyExpense = data.monthlyExpense\r\n        this.monthlyProfit = data.monthlyProfit\r\n        this.incomeTrend = data.incomeTrend\r\n        this.expenseTrend = data.expenseTrend\r\n        this.profitTrend = data.profitTrend\r\n      } catch (error) {\r\n        console.error('获取月度概览数据失败:', error)\r\n      } finally {\r\n        this.loading.summary = false\r\n      }\r\n    },\r\n    \r\n    // 获取趋势数据\r\n    async fetchTrends() {\r\n      this.loading.trends = true\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/finance/trends`)\r\n        const data = response.data\r\n        \r\n        // 更新趋势图\r\n        this.updateTrendChart(data.labels, data.income, data.expense, data.profit)\r\n      } catch (error) {\r\n        console.error('获取趋势数据失败:', error)\r\n      } finally {\r\n        this.loading.trends = false\r\n      }\r\n    },\r\n    \r\n    // 获取收入构成数据\r\n    async fetchIncomeComposition() {\r\n      this.loading.incomePie = true\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/finance/income-composition`)\r\n        const data = response.data\r\n        \r\n        // 更新收入饼图\r\n        this.updateIncomePieChart(data)\r\n      } catch (error) {\r\n        console.error('获取收入构成数据失败:', error)\r\n      } finally {\r\n        this.loading.incomePie = false\r\n      }\r\n    },\r\n    \r\n    // 获取支出构成数据\r\n    async fetchExpenseComposition() {\r\n      this.loading.expensePie = true\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/finance/expense-composition`)\r\n        const data = response.data\r\n        \r\n        // 更新支出饼图\r\n        this.updateExpensePieChart(data)\r\n      } catch (error) {\r\n        console.error('获取支出构成数据失败:', error)\r\n      } finally {\r\n        this.loading.expensePie = false\r\n      }\r\n    },\r\n    \r\n    // 获取交易明细数据\r\n    async fetchTransactions() {\r\n      this.loading.transactions = true\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/finance/transactions`, {\r\n          params: {\r\n            startDate: this.startDate,\r\n            endDate: this.endDate\r\n          }\r\n        })\r\n        this.transactions = response.data\r\n      } catch (error) {\r\n        console.error('获取交易明细数据失败:', error)\r\n        this.transactions = []\r\n      } finally {\r\n        this.loading.transactions = false\r\n      }\r\n    },\r\n    \r\n    // 初始化图表\r\n    initCharts() {\r\n      // 初始化趋势图\r\n      this.trendChart = echarts.init(this.$refs.trendChart)\r\n      \r\n      // 初始化收入构成饼图\r\n      this.incomePieChart = echarts.init(this.$refs.incomePieChart)\r\n      \r\n      // 初始化支出构成饼图\r\n      this.expensePieChart = echarts.init(this.$refs.expensePieChart)\r\n      \r\n      // 监听窗口大小变化，调整图表大小\r\n      window.addEventListener('resize', this.handleResize)\r\n    },\r\n    \r\n    // 更新趋势图\r\n    updateTrendChart(labels, incomeData, expenseData, profitData) {\r\n      this.trendChart.setOption({\r\n        title: {\r\n          text: '近6个月收支趋势'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        legend: {\r\n          data: ['收入', '支出', '利润']\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: labels\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        series: [\r\n          {\r\n            name: '收入',\r\n            type: 'line',\r\n            data: incomeData\r\n          },\r\n          {\r\n            name: '支出',\r\n            type: 'line',\r\n            data: expenseData\r\n          },\r\n          {\r\n            name: '利润',\r\n            type: 'line',\r\n            data: profitData\r\n          }\r\n        ]\r\n      })\r\n    },\r\n    \r\n    // 更新收入构成饼图\r\n    updateIncomePieChart(data) {\r\n      this.incomePieChart.setOption({\r\n        title: {\r\n          text: '收入构成'\r\n        },\r\n        tooltip: {\r\n          trigger: 'item'\r\n        },\r\n        legend: {\r\n          orient: 'vertical',\r\n          left: 'left'\r\n        },\r\n        series: [\r\n          {\r\n            type: 'pie',\r\n            radius: '50%',\r\n            data: data,\r\n            emphasis: {\r\n              itemStyle: {\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      })\r\n    },\r\n    \r\n    // 更新支出构成饼图\r\n    updateExpensePieChart(data) {\r\n      this.expensePieChart.setOption({\r\n        title: {\r\n          text: '支出构成'\r\n        },\r\n        tooltip: {\r\n          trigger: 'item'\r\n        },\r\n        legend: {\r\n          orient: 'vertical',\r\n          left: 'left'\r\n        },\r\n        series: [\r\n          {\r\n            type: 'pie',\r\n            radius: '50%',\r\n            data: data,\r\n            emphasis: {\r\n              itemStyle: {\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      })\r\n    },\r\n    \r\n    handleResize() {\r\n      this.trendChart?.resize()\r\n      this.incomePieChart?.resize()\r\n      this.expensePieChart?.resize()\r\n    },\r\n    \r\n    formatNumber(num) {\r\n      return num.toLocaleString('zh-CN', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n      })\r\n    },\r\n    \r\n    formatDate(dateStr) {\r\n      const date = new Date(dateStr)\r\n      return date.toLocaleDateString('zh-CN')\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.handleResize)\r\n    this.trendChart?.dispose()\r\n    this.incomePieChart?.dispose()\r\n    this.expensePieChart?.dispose()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.financial-page {\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.page-title {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n\r\n/* 财务概览卡片样式 */\r\n.financial-overview {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.overview-card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  min-height: 120px;\r\n}\r\n\r\n.overview-card h3 {\r\n  margin: 0 0 10px 0;\r\n  color: #666;\r\n  font-size: 16px;\r\n}\r\n\r\n.amount {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.trend {\r\n  font-size: 14px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  display: inline-block;\r\n}\r\n\r\n.trend.up {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.trend.down {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n/* 图表区域样式 */\r\n.charts-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.chart-card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  position: relative;\r\n}\r\n\r\n.chart-card h3 {\r\n  margin: 0 0 20px 0;\r\n  color: #333;\r\n  font-size: 18px;\r\n}\r\n\r\n.chart {\r\n  height: 300px;\r\n  width: 100%;\r\n}\r\n\r\n.chart-loading {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 数据表格样式 */\r\n.data-table-container {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  position: relative;\r\n}\r\n\r\n.data-table-container h3 {\r\n  margin: 0 0 20px 0;\r\n  color: #333;\r\n  font-size: 18px;\r\n}\r\n\r\n.table-controls {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.date-range {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.date-input {\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.filter-select {\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  min-width: 120px;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th,\r\n.data-table td {\r\n  padding: 12px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.data-table th {\r\n  background-color: #f5f5f5;\r\n  font-weight: 500;\r\n}\r\n\r\n.type-badge {\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.type-badge.income {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.type-badge.expense {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.income-amount {\r\n  color: #2e7d32;\r\n}\r\n\r\n.expense-amount {\r\n  color: #c62828;\r\n}\r\n\r\n.table-loading {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 40px 0;\r\n  color: #666;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 3px solid #f3f3f3;\r\n  border-top: 3px solid #3498db;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.no-data {\r\n  text-align: center;\r\n  color: #666;\r\n  padding: 20px 0;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .charts-container {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .table-controls {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .date-range {\r\n    flex-wrap: wrap;\r\n  }\r\n  \r\n  .data-table {\r\n    display: block;\r\n    overflow-x: auto;\r\n  }\r\n}\r\n</style>\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}