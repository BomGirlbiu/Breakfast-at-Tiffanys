{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5050/api';\nexport default {\n  name: 'UserManagement',\n  data() {\n    return {\n      searchTerm: '',\n      roleFilter: 'all',\n      statusFilter: 'all',\n      showAddUserModal: false,\n      showDeleteModal: false,\n      editingUser: null,\n      userToDelete: null,\n      userForm: {\n        name: '',\n        role: 'staff',\n        phone: '',\n        email: '',\n        joinDate: '',\n        status: 'active'\n      },\n      users: []\n      // 注释掉静态用户数据\n      /*\r\n      users: [\r\n        {\r\n          id: 'U001',\r\n          name: '张三',\r\n          role: 'admin',\r\n          phone: '13800138000',\r\n          email: 'zhangsan@example.com',\r\n          joinDate: '2023-01-15',\r\n          status: 'active',\r\n          avatar: 'https://randomuser.me/api/portraits/men/32.jpg'\r\n        },\r\n        {\r\n          id: 'U002',\r\n          name: '李四',\r\n          role: 'staff',\r\n          phone: '13800138001',\r\n          email: 'lisi@example.com',\r\n          joinDate: '2023-03-20',\r\n          status: 'active',\r\n          avatar: 'https://randomuser.me/api/portraits/women/44.jpg'\r\n        },\r\n        {\r\n          id: 'U003',\r\n          name: '王五',\r\n          role: 'cashier',\r\n          phone: '13800138002',\r\n          email: 'wangwu@example.com',\r\n          joinDate: '2023-06-10',\r\n          status: 'inactive',\r\n          avatar: 'https://randomuser.me/api/portraits/men/67.jpg'\r\n        }\r\n      ]\r\n      */\n    };\n  },\n  computed: {\n    filteredUsers() {\n      return this.users.filter(user => {\n        const matchesSearch = user.name.toLowerCase().includes(this.searchTerm.toLowerCase()) || user.id.toLowerCase().includes(this.searchTerm.toLowerCase()) || user.phone.includes(this.searchTerm) || user.email.toLowerCase().includes(this.searchTerm.toLowerCase());\n        const matchesRole = this.roleFilter === 'all' || user.role === this.roleFilter;\n        const matchesStatus = this.statusFilter === 'all' || user.status === this.statusFilter;\n        return matchesSearch && matchesRole && matchesStatus;\n      });\n    }\n  },\n  methods: {\n    // 获取用户数据\n    async fetchUsers() {\n      try {\n        const response = await axios.get(`${API_BASE_URL}/users`);\n        // 转换API返回的数据格式以匹配组件需要的格式\n        this.users = response.data.map(user => ({\n          id: `U${String(user.id).padStart(3, '0')}`,\n          name: user.username,\n          role: user.role || 'staff',\n          // API中可能没有这个字段\n          phone: user.phone,\n          email: user.email,\n          joinDate: user.created_at.split('T')[0],\n          // 从ISO日期格式中提取日期部分\n          status: 'active',\n          // API中可能没有这个字段\n          avatar: `https://randomuser.me/api/portraits/${Math.random() > 0.5 ? 'men' : 'women'}/${Math.floor(Math.random() * 100)}.jpg`\n        }));\n      } catch (error) {\n        console.error('Error fetching users:', error);\n        alert('获取用户数据失败');\n      }\n    },\n    getRoleName(role) {\n      const roleNames = {\n        admin: '管理员',\n        staff: '员工',\n        cashier: '收银员'\n      };\n      return roleNames[role] || role;\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('zh-CN');\n    },\n    editUser(user) {\n      this.editingUser = user;\n      this.userForm = {\n        ...user\n      };\n      this.showAddUserModal = true;\n    },\n    confirmDelete(user) {\n      this.userToDelete = user;\n      this.showDeleteModal = true;\n    },\n    async deleteUser() {\n      if (this.userToDelete) {\n        try {\n          // 从ID中提取数字部分\n          const userId = parseInt(this.userToDelete.id.replace('U', ''));\n          await axios.delete(`${API_BASE_URL}/users/${userId}`);\n          await this.fetchUsers();\n        } catch (error) {\n          console.error('Error deleting user:', error);\n          alert('删除用户失败');\n        }\n        this.showDeleteModal = false;\n        this.userToDelete = null;\n      }\n    },\n    async saveUser() {\n      try {\n        if (this.editingUser) {\n          // 更新现有用户\n          const userId = parseInt(this.editingUser.id.replace('U', ''));\n          await axios.put(`${API_BASE_URL}/users/${userId}`, {\n            username: this.userForm.name,\n            email: this.userForm.email,\n            phone: this.userForm.phone\n          });\n        } else {\n          // 添加新用户\n          const newUser = {\n            username: this.userForm.name,\n            password: 'password123',\n            // 默认密码\n            email: this.userForm.email,\n            phone: this.userForm.phone\n          };\n          await axios.post(`${API_BASE_URL}/users/register`, newUser);\n        }\n        await this.fetchUsers();\n        this.closeModal();\n      } catch (error) {\n        console.error('Error saving user:', error);\n        alert('保存用户失败');\n      }\n    },\n    closeModal() {\n      this.showAddUserModal = false;\n      this.editingUser = null;\n      this.userForm = {\n        name: '',\n        role: 'staff',\n        phone: '',\n        email: '',\n        joinDate: '',\n        status: 'active'\n      };\n    }\n  },\n  // 在组件创建时获取数据\n  created() {\n    this.fetchUsers();\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","name","data","searchTerm","roleFilter","statusFilter","showAddUserModal","showDeleteModal","editingUser","userToDelete","userForm","role","phone","email","joinDate","status","users","computed","filteredUsers","filter","user","matchesSearch","toLowerCase","includes","id","matchesRole","matchesStatus","methods","fetchUsers","response","get","map","String","padStart","username","created_at","split","avatar","Math","random","floor","error","console","alert","getRoleName","roleNames","admin","staff","cashier","formatDate","date","Date","toLocaleDateString","editUser","confirmDelete","deleteUser","userId","parseInt","replace","delete","saveUser","put","newUser","password","post","closeModal","created"],"sources":["src/components/UserManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-management\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">用户管理</h1>\r\n      <button class=\"add-user-btn\" @click=\"showAddUserModal = true\">\r\n        <span class=\"icon\">+</span> 添加用户\r\n      </button>\r\n    </div>\r\n\r\n    <!-- 搜索和筛选 -->\r\n    <div class=\"control-panel\">\r\n      <div class=\"search-container\">\r\n        <input \r\n          type=\"search\" \r\n          v-model=\"searchTerm\" \r\n          placeholder=\"搜索用户...\" \r\n          class=\"search-input\"\r\n        >\r\n        <i class=\"search-icon\">🔍</i>\r\n      </div>\r\n      \r\n      <div class=\"filters\">\r\n        <select v-model=\"roleFilter\" class=\"filter-select\">\r\n          <option value=\"all\">所有角色</option>\r\n          <option value=\"admin\">管理员</option>\r\n          <option value=\"staff\">员工</option>\r\n          <option value=\"cashier\">收银员</option>\r\n        </select>\r\n        \r\n        <select v-model=\"statusFilter\" class=\"filter-select\">\r\n          <option value=\"all\">所有状态</option>\r\n          <option value=\"active\">在职</option>\r\n          <option value=\"inactive\">离职</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 用户列表 -->\r\n    <div class=\"user-table-container\">\r\n      <table class=\"user-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>用户信息</th>\r\n            <th>角色</th>\r\n            <th>联系方式</th>\r\n            <th>入职日期</th>\r\n            <th>状态</th>\r\n            <th>操作</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"user in filteredUsers\" :key=\"user.id\">\r\n            <td class=\"user-info\">\r\n              <img :src=\"user.avatar\" :alt=\"user.name\" class=\"user-avatar\">\r\n              <div class=\"user-details\">\r\n                <div class=\"user-name\">{{ user.name }}</div>\r\n                <div class=\"user-id\">ID: {{ user.id }}</div>\r\n              </div>\r\n            </td>\r\n            <td>\r\n              <span :class=\"['role-badge', user.role]\">\r\n                {{ getRoleName(user.role) }}\r\n              </span>\r\n            </td>\r\n            <td>\r\n              <div class=\"contact-info\">\r\n                <div>{{ user.phone }}</div>\r\n                <div class=\"email\">{{ user.email }}</div>\r\n              </div>\r\n            </td>\r\n            <td>{{ formatDate(user.joinDate) }}</td>\r\n            <td>\r\n              <span :class=\"['status-badge', user.status]\">\r\n                {{ user.status === 'active' ? '在职' : '离职' }}\r\n              </span>\r\n            </td>\r\n            <td class=\"actions\">\r\n              <button class=\"action-btn edit\" @click=\"editUser(user)\">\r\n                <span class=\"icon\">✏️</span>\r\n              </button>\r\n              <button class=\"action-btn delete\" @click=\"confirmDelete(user)\">\r\n                <span class=\"icon\">🗑️</span>\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <!-- 添加/编辑用户模态框 -->\r\n    <div v-if=\"showAddUserModal\" class=\"modal\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h2>{{ editingUser ? '编辑用户' : '添加用户' }}</h2>\r\n          <button class=\"close-btn\" @click=\"closeModal\">&times;</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <form @submit.prevent=\"saveUser\" class=\"user-form\">\r\n            <div class=\"form-group\">\r\n              <label>姓名</label>\r\n              <input type=\"text\" v-model=\"userForm.name\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>角色</label>\r\n              <select v-model=\"userForm.role\" required>\r\n                <option value=\"admin\">管理员</option>\r\n                <option value=\"staff\">员工</option>\r\n                <option value=\"cashier\">收银员</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>手机号码</label>\r\n              <input type=\"tel\" v-model=\"userForm.phone\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>邮箱</label>\r\n              <input type=\"email\" v-model=\"userForm.email\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>入职日期</label>\r\n              <input type=\"date\" v-model=\"userForm.joinDate\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>状态</label>\r\n              <select v-model=\"userForm.status\" required>\r\n                <option value=\"active\">在职</option>\r\n                <option value=\"inactive\">离职</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-actions\">\r\n              <button type=\"button\" class=\"cancel-btn\" @click=\"closeModal\">取消</button>\r\n              <button type=\"submit\" class=\"save-btn\">保存</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 删除确认模态框 -->\r\n    <div v-if=\"showDeleteModal\" class=\"modal\">\r\n      <div class=\"modal-content delete-confirm\">\r\n        <h3>确认删除</h3>\r\n        <p>确定要删除用户 \"{{ userToDelete?.name }}\" 吗？此操作不可恢复。</p>\r\n        <div class=\"modal-actions\">\r\n          <button class=\"cancel-btn\" @click=\"showDeleteModal = false\">取消</button>\r\n          <button class=\"delete-btn\" @click=\"deleteUser\">确认删除</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5050/api';\r\n\r\nexport default {\r\n  name: 'UserManagement',\r\n  data() {\r\n    return {\r\n      searchTerm: '',\r\n      roleFilter: 'all',\r\n      statusFilter: 'all',\r\n      showAddUserModal: false,\r\n      showDeleteModal: false,\r\n      editingUser: null,\r\n      userToDelete: null,\r\n      userForm: {\r\n        name: '',\r\n        role: 'staff',\r\n        phone: '',\r\n        email: '',\r\n        joinDate: '',\r\n        status: 'active'\r\n      },\r\n      users: [],\r\n      // 注释掉静态用户数据\r\n      /*\r\n      users: [\r\n        {\r\n          id: 'U001',\r\n          name: '张三',\r\n          role: 'admin',\r\n          phone: '13800138000',\r\n          email: 'zhangsan@example.com',\r\n          joinDate: '2023-01-15',\r\n          status: 'active',\r\n          avatar: 'https://randomuser.me/api/portraits/men/32.jpg'\r\n        },\r\n        {\r\n          id: 'U002',\r\n          name: '李四',\r\n          role: 'staff',\r\n          phone: '13800138001',\r\n          email: 'lisi@example.com',\r\n          joinDate: '2023-03-20',\r\n          status: 'active',\r\n          avatar: 'https://randomuser.me/api/portraits/women/44.jpg'\r\n        },\r\n        {\r\n          id: 'U003',\r\n          name: '王五',\r\n          role: 'cashier',\r\n          phone: '13800138002',\r\n          email: 'wangwu@example.com',\r\n          joinDate: '2023-06-10',\r\n          status: 'inactive',\r\n          avatar: 'https://randomuser.me/api/portraits/men/67.jpg'\r\n        }\r\n      ]\r\n      */\r\n    }\r\n  },\r\n  computed: {\r\n    filteredUsers() {\r\n      return this.users.filter(user => {\r\n        const matchesSearch = user.name.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\r\n                            user.id.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\r\n                            user.phone.includes(this.searchTerm) ||\r\n                            user.email.toLowerCase().includes(this.searchTerm.toLowerCase())\r\n        \r\n        const matchesRole = this.roleFilter === 'all' || user.role === this.roleFilter\r\n        const matchesStatus = this.statusFilter === 'all' || user.status === this.statusFilter\r\n        \r\n        return matchesSearch && matchesRole && matchesStatus\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取用户数据\r\n    async fetchUsers() {\r\n      try {\r\n        const response = await axios.get(`${API_BASE_URL}/users`);\r\n        // 转换API返回的数据格式以匹配组件需要的格式\r\n        this.users = response.data.map(user => ({\r\n          id: `U${String(user.id).padStart(3, '0')}`,\r\n          name: user.username,\r\n          role: user.role || 'staff', // API中可能没有这个字段\r\n          phone: user.phone,\r\n          email: user.email,\r\n          joinDate: user.created_at.split('T')[0], // 从ISO日期格式中提取日期部分\r\n          status: 'active', // API中可能没有这个字段\r\n          avatar: `https://randomuser.me/api/portraits/${Math.random() > 0.5 ? 'men' : 'women'}/${Math.floor(Math.random() * 100)}.jpg`\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n        alert('获取用户数据失败');\r\n      }\r\n    },\r\n    \r\n    getRoleName(role) {\r\n      const roleNames = {\r\n        admin: '管理员',\r\n        staff: '员工',\r\n        cashier: '收银员'\r\n      }\r\n      return roleNames[role] || role\r\n    },\r\n    \r\n    formatDate(date) {\r\n      return new Date(date).toLocaleDateString('zh-CN')\r\n    },\r\n    \r\n    editUser(user) {\r\n      this.editingUser = user\r\n      this.userForm = { ...user }\r\n      this.showAddUserModal = true\r\n    },\r\n    \r\n    confirmDelete(user) {\r\n      this.userToDelete = user\r\n      this.showDeleteModal = true\r\n    },\r\n    \r\n    async deleteUser() {\r\n      if (this.userToDelete) {\r\n        try {\r\n          // 从ID中提取数字部分\r\n          const userId = parseInt(this.userToDelete.id.replace('U', ''));\r\n          await axios.delete(`${API_BASE_URL}/users/${userId}`);\r\n          await this.fetchUsers();\r\n        } catch (error) {\r\n          console.error('Error deleting user:', error);\r\n          alert('删除用户失败');\r\n        }\r\n        this.showDeleteModal = false;\r\n        this.userToDelete = null;\r\n      }\r\n    },\r\n    \r\n    async saveUser() {\r\n      try {\r\n        if (this.editingUser) {\r\n          // 更新现有用户\r\n          const userId = parseInt(this.editingUser.id.replace('U', ''));\r\n          await axios.put(`${API_BASE_URL}/users/${userId}`, {\r\n            username: this.userForm.name,\r\n            email: this.userForm.email,\r\n            phone: this.userForm.phone\r\n          });\r\n        } else {\r\n          // 添加新用户\r\n          const newUser = {\r\n            username: this.userForm.name,\r\n            password: 'password123', // 默认密码\r\n            email: this.userForm.email,\r\n            phone: this.userForm.phone\r\n          };\r\n          await axios.post(`${API_BASE_URL}/users/register`, newUser);\r\n        }\r\n        \r\n        await this.fetchUsers();\r\n        this.closeModal();\r\n      } catch (error) {\r\n        console.error('Error saving user:', error);\r\n        alert('保存用户失败');\r\n      }\r\n    },\r\n    \r\n    closeModal() {\r\n      this.showAddUserModal = false;\r\n      this.editingUser = null;\r\n      this.userForm = {\r\n        name: '',\r\n        role: 'staff',\r\n        phone: '',\r\n        email: '',\r\n        joinDate: '',\r\n        status: 'active'\r\n      }\r\n    }\r\n  },\r\n  \r\n  // 在组件创建时获取数据\r\n  created() {\r\n    this.fetchUsers();\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.user-management {\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.page-title {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin: 0;\r\n}\r\n\r\n.add-user-btn {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-size: 14px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.add-user-btn:hover {\r\n  background-color: #388E3C;\r\n}\r\n\r\n.control-panel {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  gap: 20px;\r\n}\r\n\r\n.search-container {\r\n  position: relative;\r\n  flex: 1;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 10px 12px 10px 36px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.search-icon {\r\n  position: absolute;\r\n  left: 12px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  color: #666;\r\n}\r\n\r\n.filters {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.filter-select {\r\n  padding: 8px 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  min-width: 120px;\r\n}\r\n\r\n.user-table-container {\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.user-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.user-table th,\r\n.user-table td {\r\n  padding: 16px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.user-table th {\r\n  background-color: #f5f5f5;\r\n  font-weight: 500;\r\n  color: #666;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.user-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.user-details {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.user-name {\r\n  font-weight: 500;\r\n  color: #333;\r\n}\r\n\r\n.user-id {\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n\r\n.role-badge {\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n}\r\n\r\n.role-badge.admin {\r\n  background-color: #E3F2FD;\r\n  color: #1976D2;\r\n}\r\n\r\n.role-badge.staff {\r\n  background-color: #E8F5E9;\r\n  color: #2E7D32;\r\n}\r\n\r\n.role-badge.cashier {\r\n  background-color: #FFF3E0;\r\n  color: #E65100;\r\n}\r\n\r\n.contact-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\n.email {\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n\r\n.status-badge {\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n}\r\n\r\n.status-badge.active {\r\n  background-color: #E8F5E9;\r\n  color: #2E7D32;\r\n}\r\n\r\n.status-badge.inactive {\r\n  background-color: #FFEBEE;\r\n  color: #C62828;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.action-btn {\r\n  padding: 6px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.action-btn.edit {\r\n  background-color: #E3F2FD;\r\n  color: #1976D2;\r\n}\r\n\r\n.action-btn.delete {\r\n  background-color: #FFEBEE;\r\n  color: #C62828;\r\n}\r\n\r\n.action-btn:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\n/* 模态框样式 */\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-content {\r\n  background: white;\r\n  border-radius: 8px;\r\n  width: 100%;\r\n  max-width: 500px;\r\n  max-height: 90vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n.modal-header {\r\n  padding: 20px;\r\n  border-bottom: 1px solid #eee;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.modal-header h2 {\r\n  margin: 0;\r\n  font-size: 20px;\r\n  color: #333;\r\n}\r\n\r\n.close-btn {\r\n  background: none;\r\n  border: none;\r\n  font-size: 24px;\r\n  color: #666;\r\n  cursor: pointer;\r\n}\r\n\r\n.modal-body {\r\n  padding: 20px;\r\n}\r\n\r\n.user-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.form-group label {\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n\r\n.form-group input,\r\n.form-group select {\r\n  padding: 8px 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 12px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.cancel-btn,\r\n.save-btn,\r\n.delete-btn {\r\n  padding: 8px 20px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.cancel-btn {\r\n  background-color: #f5f5f5;\r\n  color: #666;\r\n}\r\n\r\n.save-btn {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.delete-btn {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n.delete-confirm {\r\n  max-width: 400px;\r\n  text-align: center;\r\n}\r\n\r\n.delete-confirm h3 {\r\n  margin: 0 0 16px 0;\r\n  color: #333;\r\n}\r\n\r\n.delete-confirm p {\r\n  margin: 0 0 24px 0;\r\n  color: #666;\r\n}\r\n\r\n.modal-actions {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 12px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .control-panel {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .filters {\r\n    width: 100%;\r\n  }\r\n  \r\n  .filter-select {\r\n    flex: 1;\r\n  }\r\n  \r\n  .user-table {\r\n    display: block;\r\n    overflow-x: auto;\r\n  }\r\n  \r\n  .modal-content {\r\n    margin: 20px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}